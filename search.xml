<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 动态代理</title>
    <url>/posts/java-dynamic-proxy.html</url>
    <content><![CDATA[<h2 id="一、代理：设计模式"><a href="#一、代理：设计模式" class="headerlink" title="一、代理：设计模式"></a>一、代理：设计模式</h2><p>代理是一种常用的设计模式，其目的就是为其他对象提供一个代理以控制对某个对象的访问。</p>
<p>代理模式中的角色：</p>
<ul>
<li>Subject（抽象主题角色）：定义代理类和真实主题的公共对外方法，也是代理类代理真实主题的方法；</li>
<li>RealSubject（真实主题角色）：真正实现业务逻辑的类；</li>
<li>Proxy（代理主题角色）：用来代理和封装真实主题；</li>
</ul>
<p>代理类负责为委托类预处理消息，过滤消息并转发消息，以及进行消息被委托类执行后的后续处理。</p>
<h3 id="代理模式的好处"><a href="#代理模式的好处" class="headerlink" title="代理模式的好处"></a>代理模式的好处</h3><ul>
<li>隐藏委托类的实现，调用者只需要和代理类进行交互即可。</li>
<li>解耦，在不改变委托类代码情况下做一些额外处理，比如添加初始判断及其他公共操作<h3 id="代理模式的应用场景"><a href="#代理模式的应用场景" class="headerlink" title="代理模式的应用场景"></a>代理模式的应用场景</h3></li>
</ul>
<ol>
<li>在原方法执行之前和之后做一些操作，可以用代理来实现（比如记录Log，做事务控制等）。 </li>
<li>封装真实的主题类，将真实的业务逻辑隐藏，只暴露给调用者公共的主题接口。 </li>
<li>在延迟加载上的应用。</li>
</ol>
<h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><p>静态代理也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProxy</span> <span class="keyword">implements</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HelloImpl helloService = <span class="keyword">new</span> HelloImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start HelloProxy"</span>);</span><br><span class="line">        helloService.sayHello();</span><br><span class="line">        System.out.println(<span class="string">"end HelloProxy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IHello helloService = <span class="keyword">new</span> HelloProxy();</span><br><span class="line">        helloService.sayHello();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态代理的缺点"><a href="#静态代理的缺点" class="headerlink" title="静态代理的缺点"></a>静态代理的缺点</h4><p>1、 当需要代理多个类的时候，由于代理对象要实现与目标对象一致的接口，有两种方式：</p>
<ul>
<li>只维护一个代理类，由这个代理类实现多个接口，但是这样就导致代理类过于庞大</li>
<li>新建多个代理类，每个目标对象对应一个代理类，但是这样会产生过多的代理类</li>
</ul>
<p>2、 当接口需要增加、删除、修改方法的时候，目标对象与代理类都要同时修改，不易维护。</p>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h4 id="为什么需要动态代理？"><a href="#为什么需要动态代理？" class="headerlink" title="为什么需要动态代理？"></a>为什么需要动态代理？</h4><p>《设计模式》一书中给出的理由是“我们有时需要提供一个代理来控制对这个对象的访问”。</p>
<h5 id="为什么类可以动态生成？"><a href="#为什么类可以动态生成？" class="headerlink" title="为什么类可以动态生成？"></a>为什么类可以动态生成？</h5><p>Java虚拟机类加载过程主要分为五个阶段：加载、验证、准备、解析、初始化。其中加载阶段需要完成以下3件事情：</p>
<ol>
<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li>
<li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据访问入口</li>
</ol>
<p>由于虚拟机规范对这3点要求并不具体，所以实际的实现是非常灵活的，关于第1点，获取类的二进制字节流（class字节码）就有很多途径：</p>
<ul>
<li>从ZIP包获取，这是JAR、EAR、WAR等格式的基础</li>
<li>从网络中获取，典型的应用是 Applet</li>
<li>运行时计算生成，这种场景使用最多的是动态代理技术，在 java.lang.reflect.Proxy 类中，就是用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 *$Proxy 的代理类的二进制字节流</li>
<li>由其它文件生成，典型应用是JSP，即由JSP文件生成对应的Class类</li>
<li>从数据库中获取等等</li>
</ul>
<p>所以，动态代理就是想办法，根据接口或目标对象，计算出代理类的字节码，然后再加载到 JVM 中使用。<br>常见的字节码操作类库：</p>
<ul>
<li>Apache BCEL (Byte Code Engineering Library)：是Java classworking广泛使用的一种框架，它可以深入到JVM汇编语言进行类操作的细节。</li>
<li>ObjectWeb ASM：是一个Java字节码操作框架。它可以用于直接以二进制形式动态生成stub根类或其他代理类，或者在加载时动态修改类。</li>
<li>CGLib(Code Generation Library)：是一个功能强大，高性能和高质量的代码生成库，用于扩展JAVA类并在运行时实现接口。</li>
<li>Javassist：是Java的加载时反射系统，它是一个用于在Java中编辑字节码的类库; 它使Java程序能够在运行时定义新类，并在JVM加载之前修改类文件。</li>
</ul>
<p>实现动态代理的方式：</p>
<ul>
<li>通过实现接口的方式 -&gt; JDK 动态代理</li>
<li>通过继承类的方式 -&gt; CGLib 动态代理</li>
</ul>
<h2 id="二、JDK-动态代理"><a href="#二、JDK-动态代理" class="headerlink" title="二、JDK 动态代理"></a>二、JDK 动态代理</h2><p>JDK 动态代理的核心类有两个，InvocationHandler 和 Proxy。<br>InvocationHandler 是一个接口，只定义了 invoke 方法，表示方法的调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，proxy 为代理类的实例，method 为被调用的方法对象，args 为方法参数。<br>Proxy 是生成代理类的主类，通过 Proxy 类生成的代理类都继承了 Proxy 类。<br>Proxy 类的主要方法为 newProxyInstance，该方法是 Java 为方便创建代理对象而封装的一个函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 根据类加载器和接口创建代理类</span></span><br><span class="line">    Class clazz = Proxy.getProxyClass(loader, interfaces); </span><br><span class="line">    <span class="comment">//2. 获得代理类的带参数的构造函数</span></span><br><span class="line">    Constructor constructor = clazz.getConstructor(<span class="keyword">new</span> Class[] &#123; InvocationHandler<span class="class">.<span class="keyword">class</span> &#125;)</span>;</span><br><span class="line">    <span class="comment">//3. 创建代理对象，并制定调用处理器实例为参数传入</span></span><br><span class="line">    Interface Proxy = (Interface)constructor.newInstance(<span class="keyword">new</span> Object[] &#123;handler&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 JDK 动态代理的步骤：</p>
<ol>
<li>实现 InvocationHandler 接口，创建调用处理器；</li>
<li>通过 Proxy 类指定 ClassLoader 对象和一组接口来创建动态代理类；</li>
<li>通过反射机制获得动态代理的构造函数，其唯一参数类型是调用处理器接口类型；</li>
<li>通过构造函数创建动态代理类实例，构造时调用处理器作为参数被传入。</li>
</ol>
<p>下面通过一个具体的例子看看具体是如何使用的，：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="comment">//代理类持有一个委托类的对象引用  </span></span><br><span class="line">    <span class="keyword">private</span> Object delegate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloInvocationHandler</span><span class="params">(Object delegate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Enter method "</span>+method.getName());</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        Object result=method.invoke(delegate, args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"Exit method "</span> + method.getName());</span><br><span class="line">        System.out.println(<span class="string">"执行时间："</span> + (end - start));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IHello hello = <span class="keyword">new</span> HelloImpl();</span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> HelloInvocationHandler(hello);</span><br><span class="line">        IHello proxy = (IHello) Proxy.newProxyInstance(</span><br><span class="line">            hello.getClass().getClassLoader(), hello.getClass().getInterfaces(), handler);</span><br><span class="line">        proxy.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="JDK-动态代理的内部实现"><a href="#JDK-动态代理的内部实现" class="headerlink" title="JDK 动态代理的内部实现"></a>JDK 动态代理的内部实现</h4><p>JDK 动态代理用起来相对简单，那它内部具体是如何实现的呢？<br>首先我们来看，Proxy 类的静态方法 newProxyInstance。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">    Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">    <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用代理对象的构造方法</span></span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">        <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">        <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成代理类的实例</span></span><br><span class="line">        <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        Throwable t = e.getCause();</span><br><span class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，关键步骤有三个：一是获取代理类，二是获取代理类的构造器，三是创建实例。<br>我们先来看一，获取代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</span><br><span class="line">     proxyClassCache = <span class="keyword">new</span> WeakCache&lt;&gt;(<span class="keyword">new</span> KeyFactory(), <span class="keyword">new</span> ProxyClassFactory());</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader, Class&lt;?&gt;... interfaces) &#123;</span><br><span class="line">     <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface limit exceeded"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// If the proxy class defined by the given loader implementing</span></span><br><span class="line">     <span class="comment">// the given interfaces exists, this will simply return the cached copy;</span></span><br><span class="line">     <span class="comment">// otherwise, it will create the proxy class via the ProxyClassFactory</span></span><br><span class="line">     <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>从 proxyClassCache 缓存中获取代理类，proxyClassCache 的类型为 WeakCache&lt;ClassLoader, Class<?>[], Class<?>&gt;，也就是从缓存中获取到的是 ProxyClassFactory。ProxyClassFactory 是 Proxy 类的内部类。<br>再来看 ProxyClassFactory 是如何运行的？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">private static final class ProxyClassFactory implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">// prefix for all proxy class names</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">"$Proxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Class&lt;?&gt;, Boolean&gt; interfaceSet = <span class="keyword">new</span> IdentityHashMap&lt;&gt;(interfaces.length);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Verify that the class loader resolves the name of this</span></span><br><span class="line"><span class="comment">             * interface to the same Class object.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Class&lt;?&gt; interfaceClass = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                interfaceClass = Class.forName(intf.getName(), <span class="keyword">false</span>, loader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (interfaceClass != intf) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    intf + <span class="string">" is not visible from class loader"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Verify that the Class object actually represents an</span></span><br><span class="line"><span class="comment">             * interface.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isInterface()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    interfaceClass.getName() + <span class="string">" is not an interface"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Verify that this interface is not a duplicate.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (interfaceSet.put(interfaceClass, Boolean.TRUE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"repeated interface: "</span> + interfaceClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String proxyPkg = <span class="keyword">null</span>; <span class="comment">// package to define proxy class in</span></span><br><span class="line">        <span class="keyword">int</span> accessFlags = Modifier.PUBLIC | Modifier.FINAL;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Record the package of a non-public proxy interface so that the</span></span><br><span class="line"><span class="comment">         * proxy class will be defined in the same package. Verify that</span></span><br><span class="line"><span class="comment">         * all non-public proxy interfaces are in the same package.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="keyword">int</span> flags = intf.getModifiers();</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</span><br><span class="line">                accessFlags = Modifier.FINAL;</span><br><span class="line">                String name = intf.getName();</span><br><span class="line">                <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">                String pkg = ((n == -<span class="number">1</span>) ? <span class="string">""</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    proxyPkg = pkg;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        <span class="string">"non-public interfaces from different packages"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// if no non-public proxy interfaces, use com.sun.proxy package</span></span><br><span class="line">            proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">"."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">        String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">            proxyName, interfaces, accessFlags);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                                proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">             * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">             * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">             * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">             * exceeded).</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ProxyGenerator.generateProxyClass 是真正生成字节码的地方：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String var0, Class&lt;?&gt;[] var1, <span class="keyword">int</span> var2) &#123;</span><br><span class="line">    ProxyGenerator var3 = <span class="keyword">new</span> ProxyGenerator(var0, var1, var2);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">byte</span>[] var4 = var3.generateClassFile();</span><br><span class="line">    <span class="keyword">if</span>(saveGeneratedFiles) &#123;</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> var1 = var0.lastIndexOf(<span class="number">46</span>);</span><br><span class="line">                    Path var2;</span><br><span class="line">                    <span class="keyword">if</span>(var1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Path var3 = Paths.get(var0.substring(<span class="number">0</span>, var1).replace(<span class="string">'.'</span>, File.separatorChar), <span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">                        Files.createDirectories(var3, <span class="keyword">new</span> FileAttribute[<span class="number">0</span>]);</span><br><span class="line">                        var2 = var3.resolve(var0.substring(var1 + <span class="number">1</span>, var0.length()) + <span class="string">".class"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        var2 = Paths.get(var0 + <span class="string">".class"</span>, <span class="keyword">new</span> String[<span class="number">0</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Files.write(var2, var4, <span class="keyword">new</span> OpenOption[<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var4x) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"I/O exception saving generated file: "</span> + var4x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="JDK-动态代理的优缺点"><a href="#JDK-动态代理的优缺点" class="headerlink" title="JDK 动态代理的优缺点"></a>JDK 动态代理的优缺点</h4><p>优点：</p>
<ol>
<li>最小化依赖关系，减少依赖意味着简化开发和维护，JDK 本身的支持，可能比 cglib 更加可靠。</li>
<li>平滑进行 JDK 升级，而字节码类库通常需要进行更新以保证在新版 Java 能够使用。</li>
<li>代码实现简单。</li>
</ol>
<p>缺点：<br>因为 Java 单继承的限制（每个代理类已经继承了 Proxy 类），JDK 的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。</p>
<h2 id="三、CGLib-动态代理"><a href="#三、CGLib-动态代理" class="headerlink" title="三、CGLib 动态代理"></a>三、CGLib 动态代理</h2><p>CGLib 采用底层的字节码技术，全称是：Code Generation Library，CGLib可以为一个类创建一个子类，在子类中采用方法拦截的技术拦截所有父类方法的调用并顺势织入横切逻辑。<br>使用 CGLib 代理的方法的步骤：</p>
<ol>
<li>实现一个MethodInterceptor，方法调用会被转发到该类的intercept()方法。</li>
<li>然后通过 CGLib 动态代理获取代理对象。</li>
</ol>
<p>还是使用 IHello 的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 实现一个MethodInterceptor，方法调用会被转发到该类的intercept()方法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Enter method "</span>+method.getName());</span><br><span class="line">        <span class="keyword">return</span> proxy.invokeSuper(obj, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(HelloImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> HelloInterceptor());</span><br><span class="line">        <span class="comment">// 2. 然后通过 CGLib 动态代理获取代理对象</span></span><br><span class="line">        HelloImpl hello = (HelloImpl) enhancer.create();</span><br><span class="line">        hello.sayHello()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="CGLib-的内部实现"><a href="#CGLib-的内部实现" class="headerlink" title="CGLib 的内部实现"></a>CGLib 的内部实现</h4><p>使用 CGLib 代理之后的对象类型是 <code>cglib.HelloImpl$$EnhancerByCGLIB$$e3734e52</code>，这是 CGLib 动态生成的类型;<br>父类是 HelloImpl，印证了 CGLib 是通过继承实现代理；<br>同时实现了 net.sf.cglib.proxy.Factory 接口，这个接口是 CGLib 自己加入的，包含一些工具方法。</p>
<p>注意，既然是继承就不得不考虑final的问题，我们知道 final 类型不能有子类，所以 CGLib 不能代理final类型，遇到这种情况会抛出异常。<br>同样的，final方法是不能重载的，所以也不能通过 CGLib 代理，遇到这种情况不会抛异常，而是会跳过final方法只代理其他方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CGLIB代理类具体实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConcrete</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">e3734e52</span> <span class="keyword">extends</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        MethodInterceptor tmp17_14 = CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (tmp17_14 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将请求转发给MethodInterceptor.intercept()方法。</span></span><br><span class="line">            <span class="keyword">return</span> (String)tmp17_14.intercept(<span class="keyword">this</span>, </span><br><span class="line">                CGLIB$sayHello$<span class="number">0</span>$Method, </span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;&#125;, </span><br><span class="line">                CGLIB$sayHello$<span class="number">0</span>$Proxy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当调用代理对象的 sayHello() 方法时，首先会尝试转发给 MethodInterceptor.intercept() 方法，如果没有MethodInterceptor就执行父类的sayHello()。</p>
<h4 id="CGLib-动态代理的优缺点"><a href="#CGLib-动态代理的优缺点" class="headerlink" title="CGLib 动态代理的优缺点"></a>CGLib 动态代理的优缺点</h4><ol>
<li>不需要实现接口，从某种角度看，限定调用者实现接口时有些侵入性的实践。</li>
<li>只操作我们关心的类，而不必为其他相关类增加工作量。</li>
<li>高性能。</li>
</ol>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="JDK-与-GBLib-性能对比"><a href="#JDK-与-GBLib-性能对比" class="headerlink" title="JDK 与 GBLib 性能对比"></a>JDK 与 GBLib 性能对比</h3><p>关于两者之间的性能的话，JDK动态代理所创建的代理对象，在以前的JDK版本中，性能并不是很高，虽然在高版本中JDK动态代理对象的性能得到了很大的提升，但是他也并不是适用于所有的场景。主要体现在如下的两个指标中：<br>1、CGLib所创建的动态代理对象在实际运行时候的性能要比JDK动态代理高不少，有研究表明，大概要高10倍；<br>2、但是CGLib在创建对象的时候所花费的时间却比JDK动态代理要多很多，有研究表明，大概有8倍的差距；<br>3、因此，对于单例的代理对象或者具有实例池的代理，因为无需频繁的创建代理对象，所以比较适合采用 CGLib 动态代理，反之，则比较适用JDK动态代理。</p>
<p>经过笔者实际测试，在1.6和1.7的时候，JDK动态代理的速度要比CGLib动态代理的速度要慢，但是并没有教科书上的10倍差距，在JDK1.8的时候，JDK动态代理的速度已经比CGLib动态代理的速度快很多了。</p>
<h3 id="Python-实现动态代理"><a href="#Python-实现动态代理" class="headerlink" title="Python 实现动态代理"></a>Python 实现动态代理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, target)</span>:</span></span><br><span class="line">        self.target = target</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        target = object.__getattribute__(self, <span class="string">"target"</span>)</span><br><span class="line">        attr = object.__getattribute__(target, name)</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">newAttr</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># 包装</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"before print"</span></span><br><span class="line">            res = attr(*args, **kwargs)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"after print"</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> newAttr</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealHello</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prints</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'hello'</span>, s</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = RealHello()</span><br><span class="line">    p = Proxy(t)</span><br><span class="line">    p.prints(<span class="string">"world"</span>)</span><br></pre></td></tr></table></figure>
<p>在 Python 里面类的属性(方法)都是一个对象，我们先拿到这个类方法对象attr，然后对这个类方法对象进行包装，再返回包装后的新方法对象newAttr。注意在获取target对象时，不能直接使用self.target，因为self.target会再次调用<strong>getattribute</strong>方法，这样就会导致死循环致堆栈过深曝出异常。取而代之应该使用object.<strong>getattribute</strong>方法来获取对象的属性值。</p>
<h3 id="Javaassist-动态代理"><a href="#Javaassist-动态代理" class="headerlink" title="Javaassist 动态代理"></a>Javaassist 动态代理</h3><p>Javaassist 是一种动态代理开源库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> javassist.util.proxy.MethodHandler;</span><br><span class="line"><span class="keyword">import</span> javassist.util.proxy.ProxyFactory;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloDelegate</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">MethodHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloDelegate</span><span class="params">(T target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object self, Method method, Method proceed, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before print"</span>);</span><br><span class="line">        method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"after print"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RealHello hello = enhanceHello(<span class="keyword">new</span> RealHello());</span><br><span class="line">        hello.say(<span class="string">"world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">enhanceHello</span><span class="params">(T target)</span> </span>&#123;</span><br><span class="line">        ProxyFactory proxy = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        proxy.setSuperclass(RealHello<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HelloDelegate&lt;T&gt; delegate = <span class="keyword">new</span> HelloDelegate&lt;T&gt;(target);</span><br><span class="line">            <span class="comment">// create方法传递了两个空数组</span></span><br><span class="line">            <span class="comment">// 分别代表构造器的参数类型数组和构造器的参数实例数组</span></span><br><span class="line">            <span class="keyword">return</span> (T) proxy.create(<span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>], delegate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JavaAssist 的 ProxyFactory 还提供了方法过滤器，它可以选择性地对特定方法进行增强。</p>
<h3 id="如何保存生成的代理类？"><a href="#如何保存生成的代理类？" class="headerlink" title="如何保存生成的代理类？"></a>如何保存生成的代理类？</h3><p>借助下面的工具类，把代理类保存下来再探个究竟。<br>或者通过设置环境变量sun.misc.ProxyGenerator.saveGeneratedFiles=true也可以保存代理类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.misc.ProxyGenerator;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将根据类信息动态生成的二进制字节码保存到硬盘中，默认的是clazz目录下</span></span><br><span class="line"><span class="comment">     * params: clazz 需要生成动态代理类的类</span></span><br><span class="line"><span class="comment">     * proxyName: 为动态生成的代理类的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateClassFile</span><span class="params">(Class clazz, String proxyName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据类信息和提供的代理类名称，生成字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] classFile = ProxyGenerator.generateProxyClass(proxyName, clazz.getInterfaces());</span><br><span class="line">        String paths = clazz.getResource(<span class="string">"."</span>).getPath();</span><br><span class="line">        System.out.println(paths);</span><br><span class="line">        FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//保留到硬盘中</span></span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(paths + proxyName + <span class="string">".class"</span>);</span><br><span class="line">            out.write(classFile);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argvs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保存JDK动态代理生成的代理类，类名保存为 UserServiceProxy</span></span><br><span class="line">        ProxyUtils.generateClassFile(userServiceImpl.getClass(), <span class="string">"UserServiceProxy"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>IDEA 再次运行之后就可以在 target 的类路径下找到 UserServiceProxy.class，双击后IDEA的反编译插件会将该二进制class文件。<br>反编译出的大概如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"><span class="keyword">import</span> proxy.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxy</span><span class="params">(InvocationHandler var1)</span> <span class="keyword">throws</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> <span class="keyword">throws</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">"proxy.UserService"</span>).getMethod(<span class="string">"select"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"proxy.UserService"</span>).getMethod(<span class="string">"update"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zlbmd5dXpoZW5nZmFuL2FydGljbGUvZGV0YWlscy80OTU4NjI3Nw==">https://blog.csdn.net/fengyuzhengfan/article/details/49586277<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iYTU0YjBmMjNjMTY=">https://www.jianshu.com/p/ba54b0f23c16<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zNzU0MzAxNw==">https://zhuanlan.zhihu.com/p/37543017<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly90b255YmFpLmNvbS8yMDA1LzAzLzI1L3Rob3VnaHRzLW9uLWR5bmFtaWMtcHJveHkv">https://tonybai.com/2005/03/25/thoughts-on-dynamic-proxy/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3czNzI0MjYwOTYvYXJ0aWNsZS9kZXRhaWxzLzgyNjIyNzYz">https://blog.csdn.net/w372426096/article/details/82622763<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vYXJ0aWNsZS83NDg5">https://time.geekbang.org/column/article/7489<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82ZjZiYjJmMGVjZTk=">https://www.jianshu.com/p/6f6bb2f0ece9<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQ2FycGVudGVyTGVlL3AvODI0MTA0Mi5odG1s">https://www.cnblogs.com/CarpenterLee/p/8241042.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGlhb2x1bzUwMTM5NTM3Ny9wLzMzODMxMzAuaHRtbA==">https://www.cnblogs.com/xiaoluo501395377/p/3383130.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xvdmVqajE5OTQvYXJ0aWNsZS9kZXRhaWxzLzc4MDgwMTI0">https://blog.csdn.net/lovejj1994/article/details/78080124<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWQzZTZiMzZmYjlhMDI4YmExZmVlNmE=">https://juejin.im/post/5ad3e6b36fb9a028ba1fee6a<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YzFjYThkZjZmYjlhMDQ5YjM0N2Y1NWM=">https://juejin.im/post/5c1ca8df6fb9a049b347f55c<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL2dpZ2l4LnRob3VnaHR3b3JrZXJzLm9yZy8yMDE4LzcvMjcvZHluYW1pYy1wcm94eS8=">http://gigix.thoughtworkers.org/2018/7/27/dynamic-proxy/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL2NsaWZmbWV5ZXJzLmNvbS9ibG9nLzIwMDYvMTIvMjkvc3ByaW5nLWFvcC1jZ2xpYi1vci1qZGstZHluYW1pYy1wcm94aWVzLmh0bWw=">http://cliffmeyers.com/blog/2006/12/29/spring-aop-cglib-or-jdk-dynamic-proxies.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tcHJveHkxLw==">https://www.ibm.com/developerworks/cn/java/j-lo-proxy1/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9yZWpveS5pdGV5ZS5jb20vYmxvZy8xNjI3NDA1">https://rejoy.iteye.com/blog/1627405<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kem9uZS5jb20vYXJ0aWNsZXMvY2dsaWItbWlzc2luZy1tYW51YWw=">https://dzone.com/articles/cglib-missing-manual<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NnbGliL2NnbGliL3dpa2kvSG93LVRvI2FjY2Vzcy10aGUtZ2VuZXJhdGVkLWJ5dGUtYXJyYXktZGlyZWN0bHk=">https://github.com/cglib/cglib/wiki/How-To#access-the-generated-byte-array-directly<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 651 题解</title>
    <url>/posts/codeforces-round-651-solution.html</url>
    <content><![CDATA[<h1 id="A-Maximum-GCD"><a href="#A-Maximum-GCD" class="headerlink" title="A. Maximum GCD"></a>A. Maximum GCD</h1><p>给定 1 - n 个整数，两个不同的整数组成一个数对，每一数对存在一个最大公约数。</p>
<p>求所有数对中最大公约数的最大值。</p>
<blockquote>
<p>最大公约数指能够整除多个整数的最大正整数</p>
</blockquote>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>认识最大公约数大概是小学的时候了，但是不妨碍我们回忆一下，如何求解两个数的最大公约数？</p>
<h3 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h3><p>欧几里得算法也叫辗转相除法，它的原理依赖于欧几里得提出的定理：</p>
<blockquote>
<p>定理：gcd(a, b) == gcd(b, a mod b)</p>
</blockquote>
<p>欧几里得算法的时间复杂度是O(log n)。</p>
<p>当我们求 gcd(a, b) 时，会遇到两种情况：</p>
<ul>
<li>a &lt; b，此时 gcd(a, b) = gcd(b, a)</li>
<li>a &gt;= b，此时 gcd(a, b) = gcd(b, a mod b)</li>
</ul>
<p>a mod b 的操作会让 a 至少减半，意味着这一操作最多发生 O(log n) 次，第一种情况发生后接着一定会发生第二种情况，所以总体的复杂度是 O(log n)。</p>
<p>欧几里得算法在效率上已经很好了，这指的是它理论上的时间复杂度。但不能忽略的是，取模运算效率是较低的。现代计算机在计算 64 位以下的整数模时，只需要几个指令。但对超过 64 位的数，需要采取类似于多位数除法手算过程的试商法，需要消耗更多 CPU 时间。</p>
<p>抛弃除法和取模的一种替代办法是直接用减法实现。</p>
<p>另一种方案就是 Stein 算法。</p>
<h3 id="Stein-算法"><a href="#Stein-算法" class="headerlink" title="Stein 算法"></a>Stein 算法</h3><p>Stein 算法 只有整数的位移和加减法，它的原来依赖于公式：gcd(ka, kb) = k * gcd(a, b)。特殊的，当 k = 2 时，可以用向右位移 1 位来代替除法操作。当 a，b 都是奇数时，再采用减法实现取模的操作。</p>
<div class="tabs" id="求解两数的最大公约数"><ul class="nav-tabs"><li class="tab active"><a href="#求解两数的最大公约数-1">欧几里得算法</a></li><li class="tab"><a href="#求解两数的最大公约数-2">欧几里得算法（除法版）</a></li><li class="tab"><a href="#求解两数的最大公约数-3">Stein 算法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="求解两数的最大公约数-1"><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> gcd(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">while</span>(b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">int</span> t = b;</span><br><span class="line">        b = a % b;</span><br><span class="line">        a = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="求解两数的最大公约数-2"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(a != b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            a -= b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            b -= a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="求解两数的最大公约数-3"><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> gcd(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; b % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * gcd(a &gt;&gt; <span class="number">1</span>, b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> gcd(a &gt;&gt; <span class="number">1</span>, b);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> gcd(a, b &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> gcd(Math.abs(a - b), Math.min(a, b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<p>回过头来看这题，求解 gcd(a, b) 的最大值，其中 1 &lt;= a &lt; b &lt;= n。</p>
<p>暴力的解法是遍历所有数对（$C_n^2$ 对），依次求出最大公约数，取最大值。</p>
<p>时间复杂度是 $O(n^2 * \log(max(a, b)))$，其中 $\log(max(a, b))$ 是计算最大公约数的复杂度。</p>
<p><strong>如何优化暴力解法呢？</strong></p>
<p>一种优化方案是借助因数分解的方法，记录下 [1, n] 里每个数的所有因数，如果存在两个数有同一个因数，那么这个因数是一个公因数，最后从大到小判断即可找出最大公约数。</p>
<p>对于一个数 a，求解所有因数的时间复杂度是$O(\sqrt{a})$。算法的整体时间复杂度是$O(n*\sqrt{n})$;</p>
<p>不幸的是，上述两种算法提交到 CodeForces 均在 test3 测试集上超时了。</p>
<p>换一种思路，可不可以从大到小检查每个数是否是某两个数的公因数？</p>
<p>答案是可以的，问题是如何才能高效的检查？</p>
<p>假设 g 是一个公因数，那么必定存在不大于 n 的数 kg（k &gt; 1）。所以对每一个数 a，只要判断在 [1, n] 范围内是否存在 ka。（详细算法见代码，该算法可以应用到求多个数的最大公约数）</p>
<p><strong>这是最佳答案吗？</strong></p>
<p>再进一步分析，假设 g 是最大公约数的最大值，那么另一个数的最小值是 2 * g。于是有 2 * g &lt;= n, $g &lt;= \frac{n}{2}$。我们总可以取 $\lfloor \frac{n}{2} \rfloor$ 和 $2 * \lfloor \frac{n}{2} \rfloor$ 得到这样一个最大公约数为 g 的数对，所以 g = $\lfloor \frac{n}{2} \rfloor$（没想到答案是这样的！！）。</p>
<h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><div class="tabs" id="a.-maximun-gcd"><ul class="nav-tabs"><li class="tab active"><a href="#a.-maximun-gcd-1">解法一</a></li><li class="tab"><a href="#a.-maximun-gcd-2">解法二</a></li></ul><div class="tab-content"><div class="tab-pane active" id="a.-maximun-gcd-1"><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    static <span class="keyword">final</span> FS sc = new FS(); <span class="comment">// 封装输入类</span></span><br><span class="line">    static <span class="keyword">final</span> PrintWriter pw = new PrintWriter(System.<span class="keyword">out</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> n = sc.nextInt();</span><br><span class="line">            <span class="built_in">int</span>[] divisors = new <span class="built_in">int</span>[n + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">                divisors[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> res = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = n;i &gt;= <span class="number">1</span>;i--) &#123;</span><br><span class="line">                <span class="built_in">int</span> j = i, counter = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(j &lt;= n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (divisors[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        counter += divisors[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    j += i;</span><br><span class="line">                    <span class="keyword">if</span> (counter == <span class="number">2</span>) &#123;</span><br><span class="line">                        res = i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (res &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pw.println(res);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="a.-maximun-gcd-2"><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS(); <span class="comment">// 封装输入类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">            pw.<span class="built_in">println</span>(n / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="B-GCD-Compression"><a href="#B-GCD-Compression" class="headerlink" title="B. GCD Compression"></a>B. GCD Compression</h1><p>给定有 2n 个正整数的数组 a，现在要将它压缩成 n - 1 个数的数组 b。</p>
<p>首先随机去除两个数，然后不放回的随机选两个数相加作为 b 的元素。</p>
<p>b 最后应该满足条件：所有元素的最大公约数大于 1。</p>
<p>输出一个满足的方案。</p>
<h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><p>选取两个数相加后，再求最大公约数。可能的情况有 $C_n^2 * C_{n - 2}^2$，遍历所有解空间将是灾难级的复杂度。</p>
<p>如果无法遍历上优化，从另一个角度想，有没有稳定的生成方案？</p>
<p>容易想到的是，如果 b 数组是偶数数组，那么是满足题目条件的。</p>
<p>我们可以将奇数和偶数分开，使相加后的 b 数组的元素都是偶数。如果奇数个数或偶数个数是奇数，可以选择丢弃一个，最终得到 n - 1 个偶数。</p>
<p>最终算法的时间复杂度是 O(n)。</p>
<h2 id="AC-代码-1"><a href="#AC-代码-1" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="comment">// 封装输入类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">            List&lt;Integer&gt; odd = <span class="keyword">new</span> ArrayList&lt;&gt;(),</span><br><span class="line">                    even = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">2</span> * n;i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">                <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    even.add(i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    odd.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; odd.<span class="built_in">size</span>() - <span class="number">1</span>;i += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count == n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pw.<span class="built_in">println</span>(odd.<span class="built_in">get</span>(i) + <span class="string">" "</span> + odd.<span class="built_in">get</span>(i + <span class="number">1</span>));</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; even.<span class="built_in">size</span>() - <span class="number">1</span>;i += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count == n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pw.<span class="built_in">println</span>(even.<span class="built_in">get</span>(i) + <span class="string">" "</span> + even.<span class="built_in">get</span>(i + <span class="number">1</span>));</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-Number-Game"><a href="#C-Number-Game" class="headerlink" title="C. Number Game"></a>C. Number Game</h1><p>Ashishgup 和 FastestFinger 玩游戏，初始数字是 n。<br>对 n 可以有两种操作：</p>
<ul>
<li>除以一个 n 的大于 1 的奇数因子（可以包括自身）</li>
<li>减 1，当 n &gt; 1 时</li>
</ul>
<p>当轮到谁无法行动时，就输了。Ashishgup 先行动。</p>
<p>输出赢家（Ashishgup 或 FastestFinger）</p>
<h2 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h2><p>输的一方是什么情况下必输呢？</p>
<p>很显然，当遇到 1 的时候，因为如果大于 1，总是可以做减 1 操作。</p>
<p>可以从这一结论推出其他结果吗？</p>
<p>这是一题典型的博弈问题，总是可以通过动态规划来求解。假设我能将数字变为 1，我就赢了。推广下去，如果我们可以走到对方输的那一个数字，我就赢了。</p>
<p>用 dp[i] 表示 Ashishgup 的结果，true 为 Ashishgup 赢。那么只要 Ashishgup 可以将 i 变为 j 且 dp[j] 为false，Ashishgup 就能赢。</p>
<p>Ashishgup 能否找到 j，取决于是否存在奇数因子或 dp[i - 1]。所以，当 n 为奇数且n &gt; 1 时，Ashishgup 必赢，因为 i 就是要找的 j。其余可以通过遍历寻找 i 的奇数因子。</p>
<p>该算法的时间复杂度是 $O(n * \sqrt{n})$，其中 $\sqrt{n}$ 为寻找奇数因子的复杂度。</p>
<p>不幸的是，该算法在 Codeforces 上超时了。如果用 dp 数组存储还会超出空间限制。</p>
<p>再继续深挖，当 n 为偶数时，如果不存在大于 1 的奇数因子，那么它的形式为 $2^x$。Ashishgup 只能减 1，n 变为奇数。根据上面的分析，Ashishgup 输了。（特殊情况，x = 1 时，Ashishgup 赢了）</p>
<p>那么只剩最后一种情况，当 n 为偶数时且存在奇数因子，Ashishgup 可以除去最大的奇数因子，使 n 变为 2^x 的形式（因为 x &gt; 1，所以 n 必须被 4 整除），此时 Ashishgup 必赢。</p>
<p>若 n 不是 4的整数倍，n 的形式为 2 * m，m 如果是质数，Ashishgup 只能除以 m 或减 1，Ashishgup 都输了；如果 m 不是质数，Ashishgup 除以 m 的一个因子，使 FastestFinger 遇到 2 * m 的情况，Ashishgup 赢了。</p>
<p>综上总结，只有以下几种情况 Ashishgup 输了：</p>
<ol>
<li>n == 1</li>
<li>n 是 2 的次方</li>
<li>n &gt; 2 且 n % 2 == 0 且 n % 4 != 0 且 n / 2 是质数</li>
</ol>
<p>算法时间复杂度是 $O(\sqrt{n})$，也是判断是否质数的时间</p>
<div class="note warning">
            <p>判断是否质数不能从 2 遍历到 n，否则会超时，而且要包含 $\sqrt{n}$，否则当 n 为平方数时出错。  </p>
          </div>


<h2 id="AC-代码-2"><a href="#AC-代码-2" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 封装输入类</span></span><br><span class="line">    static <span class="keyword">final</span> FS sc = new FS();</span><br><span class="line">    static <span class="keyword">final</span> PrintWriter pw = new PrintWriter(System.<span class="keyword">out</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static <span class="built_in">bool</span>ean isPrime(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">2</span>;i &lt;= Math.sqrt(n);i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> n = sc.nextInt();</span><br><span class="line">            <span class="built_in">bool</span>ean lose = (n == <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(n &gt; <span class="number">2</span> &amp;&amp; n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    lose = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">4</span> != <span class="number">0</span> &amp;&amp; isPrime(n / <span class="number">2</span>)) &#123;</span><br><span class="line">                    lose = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pw.println(lose ? <span class="string">"FastestFinger"</span> : <span class="string">"Ashishgup"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="D-Odd-Even-Subsequence"><a href="#D-Odd-Even-Subsequence" class="headerlink" title="D. Odd-Even Subsequence"></a>D. Odd-Even Subsequence</h1><p>给定大小为 n 的数组，它的子序列 s 的价值表示为以下两个数的最小值：</p>
<ul>
<li>所有 s 的偶数位上的最大值</li>
<li>所有 s 的奇数位上的最大值</li>
</ul>
<p>比如 s = {7, 5, 6}，那么 cost = min(max(7, 6), max(5)) = min(7, 5) = 5。</p>
<p>求所有大小为 k 的子序列的最小价值。</p>
<h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h2><p>要仔细看题目，刚开始以为奇偶位是以原数组位准，其实是以子序列为准。</p>
<p>假设 s 的偶数位上的最大值为 maxEven，对应的奇数位为 maxOdd。要想让 maxEven 和 maxOdd 的较小值最小，不妨将大值尽量放在偶数位，小值尽量放在奇数位。这样可以保证始终有 maxOdd &lt; maxEven。</p>
<p><strong>那要如何去找到这样的长度为 k 的子序列呢？</strong></p>
<p>如果遍历各个长度为 k 的子序列的话，可能的情况有 $C_n,^k$ 种，再遍历 k 位找到最小价值，时间复杂度为 $O(kn^2)$。</p>
<p>显然，遍历不是正确的方向。</p>
<p>假设给定价值 x，我们能够构造出长度大于等于 k 的子序列，我们就能够慢慢逼近我们要的最小价值。构造子序列的方法与上述 maxOdd &lt; maxEven 有关：</p>
<ul>
<li>对于偶数位，不关心数的大小</li>
<li>对于奇数位，只有比 x 小的数才算，保证最终 maxOdd &lt;= x</li>
</ul>
<p>逼近最小价值可以使用二分搜索算法。</p>
<p>最终算法复杂度为 $O(n\log(n))$。</p>
<h2 id="AC-代码-3"><a href="#AC-代码-3" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 封装输入类</span></span><br><span class="line">    static <span class="keyword">final</span> FS sc = new FS();</span><br><span class="line">    static <span class="keyword">final</span> PrintWriter pw = new PrintWriter(System.<span class="keyword">out</span>);</span><br><span class="line">    static  <span class="built_in">int</span> n, k;</span><br><span class="line">    static  <span class="built_in">int</span>[] nums;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        n = sc.nextInt();</span><br><span class="line">        k = sc.nextInt();</span><br><span class="line">        nums = new <span class="built_in">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            nums[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> l = <span class="number">1</span>, r = (<span class="built_in">int</span>) <span class="number">10e9</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="built_in">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (search(mid, <span class="number">0</span>) || search(mid, <span class="number">1</span>)) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.println(l);</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static <span class="built_in">bool</span>ean search(<span class="built_in">int</span> mid, <span class="built_in">int</span> pos) &#123;</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                pos ^= <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &lt;= mid) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                pos ^= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt;= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E-Binary-Subsequence-Rotation"><a href="#E-Binary-Subsequence-Rotation" class="headerlink" title="E. Binary Subsequence Rotation"></a>E. Binary Subsequence Rotation</h1><p>s 和 t 是两个二进制字符串，长度为 n。</p>
<p>在一次旋转中可以选取任意位置的节点一起顺时针旋转一位。</p>
<p>比如 s = 1110100，点集合是 {2, 6, 7}（起始为 1），旋转后的字符串为 s = 1010110。</p>
<p>求将 s 变为 t 需要旋转的最少次数。</p>
<h2 id="思考-4"><a href="#思考-4" class="headerlink" title="思考"></a>思考</h2><p>明显的，如果 s 和 t 的 0 和 1 的个数不相等，返回 -1；否则一定能将 s 旋转为 t。</p>
<p><strong>如何保证旋转次数最少？</strong></p>
<p>因为只有选中的位置才会旋转，所以一个位置最多旋转一次。如果能一起旋转的位置都一起旋转，即可保证旋转次数最少。</p>
<p><strong>那怎样的位置可以一起旋转？</strong></p>
<p>答案是间隔差异的位置，最终选中的模式应该是 010101 或 101010 这样间隔的。</p>
<p>假设 a[i] 表示 s[i] - t[i]，当 s[i] = t[i] 时，a[i] = 0，否则 a[i] = 1 或 -1。</p>
<p>现在问题可以转化为将 a 中的元素按 1, -1, 1 这样串起来，最少需要多少串才能包含所有非 0 元素？</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9ibG9nL2VudHJ5Lzc5MTA3">官方题解<i class="fa fa-external-link-alt"></i></span> 给出的解决方案：a 的最大子数组绝对值和就是答案。</p>
<p>题解中还给了详细的证明，有时间再来学习它的证明（@TODO）。</p>
<p>算法时间复杂度是 O(n)。</p>
<h2 id="AC-代码-4"><a href="#AC-代码-4" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="comment">// 封装输入类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">String</span> s = sc.next();</span><br><span class="line">        <span class="keyword">String</span> t = sc.next();</span><br><span class="line">        <span class="keyword">int</span>[] diff = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            diff[i] = s.charAt(i) - t.charAt(i);</span><br><span class="line">            sum += diff[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">            pw.<span class="built_in">println</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> cur1 = <span class="number">0</span>, cur2 = <span class="number">0</span>, max1 = <span class="number">0</span>, max2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">                cur1 += diff[i];</span><br><span class="line">                cur2 -= diff[i];</span><br><span class="line">                max1 = Math.<span class="built_in">max</span>(max1, cur1);</span><br><span class="line">                max2 = Math.<span class="built_in">max</span>(max2, cur2);</span><br><span class="line">                cur1 = Math.<span class="built_in">max</span>(cur1, <span class="number">0</span>);</span><br><span class="line">                cur2 = Math.<span class="built_in">max</span>(cur2, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            pw.<span class="built_in">println</span>(Math.<span class="built_in">max</span>(max1, max2));</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="F-The-Hidden-Pair"><a href="#F-The-Hidden-Pair" class="headerlink" title="F. The Hidden Pair"></a>F. The Hidden Pair</h1><p>这是一道交互题。</p>
<p>给定 n 个节点的树，节点的值为 [1, n]。输入 n 和 n - 1 条边。Ayush 和 Ashish 各选了一个节点作为隐藏节点。你的任务是找出这两个隐藏节点。</p>
<p>你可以做如下查询：</p>
<ul>
<li>输入节点列表，返回两个值：一个是距离两个隐藏节点的距离和最小的节点，另一个值是该距离和。</li>
</ul>
<p>你最多做 14 次查询。（Hard 版最多 11 次）</p>
<h2 id="思考-5"><a href="#思考-5" class="headerlink" title="思考"></a>思考</h2><p>这题没什么思路，参考<span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9ibG9nL2VudHJ5Lzc5MTA3">官方题解<i class="fa fa-external-link-alt"></i></span>（还没完全吃透，暂不给出代码@TODO）。</p>
<p><strong>Key Idea：</strong> 通过一次查询找到两个隐藏节点中间的那个节点 r，然后以该节点为 root 节点，再通过二分搜索找到其中一个隐藏节点。</p>
<p>首先，如果查询所有节点，那么返回的节点一定是两个隐藏节点中间的那个节点 r，返回的距离为 l。</p>
<p>如果我们能找到一个隐藏节点 a，另外一个节点 b 可以查询离 a 距离为 l 的所有节点，返回的肯定就是 b 节点。</p>
<p>我们可以通过二分搜索找到 a。假设我们查询离根节点 r 为 d 的所有节点，返回的值是 x。</p>
<ul>
<li>如果 a 和 b 中有一个节点距离 r 大于等于 d，那么 x 肯定等于 l</li>
<li>否则 x 肯定大于 l</li>
</ul>
<p>所以我们可以二分搜索 d 来找到 a。这需要 10 次 查询因为最大的深度可能是 n。</p>
<p>然后再需要一次查询找到 b。总共需要 12 次（只能通过 Easy 版）。</p>
<p>另外注意到，a 和 b 距离 r 的和为 l，那么肯定至少有一个节点距离 r 的值大于等于 l / 2（向上取整）。所以二分搜索的下届可以设为 l / 2。</p>
<p>这样可以减少一次搜索，只需 11 次（满足Hard 版本）。</p>
<p>整体的时间复杂度是O(n^2)。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>Algorithm</tag>
        <tag>Competive Programming</tag>
        <tag>Div2</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Weekly 195 题解</title>
    <url>/posts/leetcode-weekly-195-solution.html</url>
    <content><![CDATA[<h1 id="1-数组异或操作"><a href="#1-数组异或操作" class="headerlink" title="1. 数组异或操作"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveG9yLW9wZXJhdGlvbi1pbi1hbi1hcnJheQ==">1. 数组异或操作<i class="fa fa-external-link-alt"></i></span></h1><p>给定两个整数，n 和 start 。</p>
<p>数组 nums 定义为：nums[i] = start + 2 * i（下标从 0 开始）且 n == nums.length 。</p>
<p>返回 nums 中所有元素按位异或（XOR）后得到的结果。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>一眼看过去是送分题，其实真是送分题，O(n) 的解法居然也过了，因为数据集 n &lt;= 1000。</p>
<p>仔细想想，可以利用异或的性质 $$2x \oplus (2x + 1) = 1$$ 将复杂度降到 O(1)。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMveG9yLW9wZXJhdGlvbi1pbi1hbi1hcnJheS9zb2x1dGlvbi9vMS13ZWkteXVuLXN1YW4tYnktYnJ1Y2V5dWov">Leetcode-cn 题解<i class="fa fa-external-link-alt"></i></span> 上有完整的解释。</p>
<h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> xorOperation(<span class="built_in">int</span> n, <span class="built_in">int</span> start) &#123;</span><br><span class="line">        <span class="built_in">int</span> res = start;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>;i &lt; n;i++) &#123;</span><br><span class="line">            res ^= (start + <span class="number">2</span> * i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-保证文件名唯一"><a href="#2-保证文件名唯一" class="headerlink" title="2. 保证文件名唯一"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWFraW5nLWZpbGUtbmFtZXMtdW5pcXVl">2. 保证文件名唯一<i class="fa fa-external-link-alt"></i></span></h1><p>给你一个长度为 n 的字符串数组 names 。你将会在文件系统中创建 n 个文件夹：在第 i 分钟，新建名为 names[i] 的文件夹。</p>
<p>由于两个文件不能共享相同的文件名，因此如果新建文件夹使用的文件名已经被占用，系统会以 (k) 的形式为新文件夹的文件名添加后缀，其中 k 是能保证文件名唯一的最小正整数 。</p>
<p>返回长度为 n 的字符串数组，其中 ans[i] 是创建第 i 个文件夹时系统分配给该文件夹的实际名称。</p>
<h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><p>由于需要记录名字是否出现以及后缀关系到次数，可以选择用哈希表记录出现过的名字，以及名字重复的次数。</p>
<p>要注意的是，在计算后缀时，需要检测是否有原生的名字出现过，不能仅仅以名字重复的次数来决定。</p>
<p>根据是否在哈希表中可以分为两种情况：</p>
<ul>
<li>不在哈希表中，直接作为结果，并记录次数为 1</li>
<li>在哈希表中，遍历寻找未出现的后缀，并记录新、旧名字各一次</li>
</ul>
<h2 id="AC-代码-1"><a href="#AC-代码-1" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span>[] getFolderNames(<span class="keyword">String</span>[] names) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">String</span>[] res = <span class="keyword">new</span> <span class="keyword">String</span>[names.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; names.length;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = counts.getOrDefault(names[i], <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                res[i] = names[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(counts.containsKey(names[i] + <span class="string">"("</span> + c + <span class="string">")"</span>)) &#123;</span><br><span class="line">                    c++;</span><br><span class="line">                &#125;</span><br><span class="line">                res[i] = names[i] + <span class="string">"("</span> + c + <span class="string">")"</span>;</span><br><span class="line">                counts.<span class="built_in">put</span>(res[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            counts.<span class="built_in">put</span>(names[i], c + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-避免洪水泛滥"><a href="#3-避免洪水泛滥" class="headerlink" title="3. 避免洪水泛滥"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYXZvaWQtZmxvb2QtaW4tdGhlLWNpdHkv">3. 避免洪水泛滥<i class="fa fa-external-link-alt"></i></span></h1><p>给定一个整数数组 rains，其中</p>
<ul>
<li>rains[i] &gt; 0 表示第 i 天，第 rains[i] 个湖泊会下雨</li>
<li>rains[i] == 0 表示第 i 天晴天，可以选择抽干一个湖泊</li>
</ul>
<p>如果一个湖泊下过雨没有被抽干，再一次下雨会发生洪水。</p>
<p>请返回一个数组 ans，其中：</p>
<ul>
<li>ans[i] == -1 表示第 i 天是下雨天</li>
<li>ans[i] &gt; 0 表示第 i 天是晴天，且抽干第 ans[i] 个湖泊<br>如果无法避免洪水，则返回空数组。</li>
</ul>
<h2 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h2><p>题目是要避免洪水泛滥，也就是避免在湖泊下过雨抽干前再次下雨。</p>
<p>很容易能联想到贪心策略：在晴天选择抽干哪个湖泊时，优先选择下过雨的湖泊中最快要下的那一个。</p>
<p><strong>问题是如何找出最快要下的那一个？</strong></p>
<p>如果直接往后遍历的话，遍历一次的复杂度是 O(n)，整体复杂度会达到 $O(n^2)$。</p>
<p>这里涉及到优先选哪个的问题，容易想到用优先队列（本质上是小顶堆）。</p>
<p>整体算法流程如下：</p>
<ul>
<li>先遍历一遍 rains，记录下每个湖泊下雨的天数</li>
<li>在第 i 天，如果 rains[i] &gt; 0，将 rains[i] 加入满池，并把它下一个下雨天加入队列中</li>
<li>如果 rains[i] == 0，从队列中选最近要下雨的湖泊 j，将它从满池移开</li>
</ul>
<p>优先级队列贪心算法的时间复杂度为 $O(n\log{n})$。</p>
<p>还有一种策略是，遇到晴天时，暂时不决定抽干哪个湖泊，先将晴天保存起来。在遇到洪水时，再选择一个晴天来抽干。如果找不到就返回空数组。</p>
<p><strong>问题就变成了如何选择晴天？</strong></p>
<p>与优先级队列贪心算法类似，从上一次下雨那天往后找，遇到的第一个未用的晴天就是。</p>
<p>如果直接遍历，也是 O(n) 的复杂度。因为天数是单调递增的，所以晴天也是单调递增的。</p>
<p>在单调递增的数组中找一个大于 a 的数，可以用二分查找法。在 Java 中，可以用 TreeMap 的 higer 方法。两者的时间复杂度相同，都是 $O(\log{n})$。</p>
<p>二分查找贪心算法的时间复杂度也是 $O(n\log{n})$。</p>
<h2 id="AC-代码-2"><a href="#AC-代码-2" class="headerlink" title="AC 代码"></a>AC 代码</h2><div class="tabs" id="避免洪水泛滥"><ul class="nav-tabs"><li class="tab active"><a href="#避免洪水泛滥-1">解法一：优先级队列</a></li><li class="tab"><a href="#避免洪水泛滥-2">解法二：二分查找</a></li></ul><div class="tab-content"><div class="tab-pane active" id="避免洪水泛滥-1"><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">        int first, second;</span><br><span class="line">        Node(int f, int s) &#123;</span><br><span class="line">            <span class="keyword">this</span>.first = f;</span><br><span class="line">            <span class="keyword">this</span>.second = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public int[] avoidFlood(int[] rains) &#123;</span><br><span class="line">        Map&lt;Integer, LinkedList&lt;Integer&gt;&gt; maps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        int n = rains.length;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            maps.computeIfAbsent(rains[i], k<span class="function"> -&gt;</span> <span class="keyword">new</span> LinkedList&lt;&gt;()).add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        int[] res = <span class="keyword">new</span> int[n];</span><br><span class="line">        PriorityQueue&lt;Node&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;<span class="function"><span class="params">((a, b) -&gt; a.second - b.second)</span>;</span></span><br><span class="line"><span class="function">        <span class="title">Set</span>&lt;<span class="title">Integer</span>&gt; <span class="title">full</span> = <span class="title">new</span> <span class="title">HashSet</span>&lt;&gt;<span class="params">()</span>;</span></span><br><span class="line"><span class="function">        <span class="title">for</span><span class="params">(int i = <span class="number">0</span>;i &lt; n;i++)</span> &#123;</span></span><br><span class="line"><span class="function">            <span class="title">if</span> <span class="params">(rains[i] &gt; <span class="number">0</span>)</span> &#123;</span></span><br><span class="line"><span class="function">                <span class="title">if</span> <span class="params">(full.contains(rains[i]))</span> &#123;</span></span><br><span class="line"><span class="function">                    <span class="title">return</span> <span class="title">new</span> <span class="title">int</span>[0];</span></span><br><span class="line"><span class="function">                &#125; <span class="title">else</span> &#123;</span></span><br><span class="line"><span class="function">                    <span class="title">LinkedList</span>&lt;<span class="title">Integer</span>&gt; <span class="title">list</span> = <span class="title">maps</span>.<span class="title">get</span><span class="params">(rains[i])</span>;</span></span><br><span class="line"><span class="function">                    <span class="title">list</span>.<span class="title">poll</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">                    <span class="title">if</span> <span class="params">(<span class="keyword">list</span>.peek() != <span class="literal">null</span>)</span> &#123;</span></span><br><span class="line"><span class="function">                        <span class="title">pq</span>.<span class="title">add</span><span class="params">(<span class="keyword">new</span> Node(rains[i], <span class="keyword">list</span>.peek()))</span>;</span></span><br><span class="line"><span class="function">                        <span class="title">full</span>.<span class="title">add</span><span class="params">(rains[i])</span>;</span></span><br><span class="line"><span class="function">                    &#125;</span></span><br><span class="line"><span class="function">                &#125;</span></span><br><span class="line"><span class="function">                <span class="title">res</span>[<span class="title">i</span>] = -1;</span></span><br><span class="line"><span class="function">            &#125; <span class="title">else</span> &#123;</span></span><br><span class="line"><span class="function">                <span class="title">if</span> <span class="params">(full.isEmpty())</span> &#123;</span></span><br><span class="line"><span class="function">                    <span class="title">res</span>[<span class="title">i</span>] = 1;</span></span><br><span class="line"><span class="function">                &#125; <span class="title">else</span> &#123;</span></span><br><span class="line"><span class="function">                    <span class="title">Node</span> <span class="title">node</span> = <span class="title">pq</span>.<span class="title">poll</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">                    <span class="title">full</span>.<span class="title">remove</span><span class="params">(node.first)</span>;</span></span><br><span class="line"><span class="function">                    <span class="title">res</span>[<span class="title">i</span>] = <span class="title">node</span>.<span class="title">first</span>;</span></span><br><span class="line"><span class="function">                &#125;</span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">res</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="避免洪水泛滥-2"><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> <span class="type">int</span>[] avoidFlood(<span class="type">int</span>[] rains) &#123;</span><br><span class="line">        <span class="type">int</span> n = rains.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="built_in">new</span> <span class="type">int</span>[n];</span><br><span class="line">        Arrays.fill(res, <span class="number">1</span>);</span><br><span class="line">        TreeSet&lt;<span class="type">Integer</span>&gt; sunny = <span class="built_in">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        Map&lt;<span class="type">Integer</span>, <span class="type">Integer</span>&gt; rainMap = <span class="built_in">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rains[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                sunny.<span class="keyword">add</span>(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Integer</span> lastRain = rainMap.<span class="keyword">get</span>(rains[i]);</span><br><span class="line">                <span class="keyword">if</span> (lastRain != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="type">Integer</span> lastSun = sunny.higher(lastRain);</span><br><span class="line">                    <span class="keyword">if</span> (lastSun == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">new</span> <span class="type">int</span>[<span class="number">0</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    res[lastSun] = rains[i];</span><br><span class="line">                    sunny.remove(lastSun);</span><br><span class="line">                &#125;</span><br><span class="line">                rainMap.put(rains[i], i);</span><br><span class="line">                res[i] = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>

<h1 id="4-找到最小生成树里的关键边和伪关键边"><a href="#4-找到最小生成树里的关键边和伪关键边" class="headerlink" title="4. 找到最小生成树里的关键边和伪关键边"></a><span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1jcml0aWNhbC1hbmQtcHNldWRvLWNyaXRpY2FsLWVkZ2VzLWluLW1pbmltdW0tc3Bhbm5pbmctdHJlZQ==">4. 找到最小生成树里的关键边和伪关键边<i class="fa fa-external-link-alt"></i></span></h1><p>给定一个 n 个点的带权无向连通图，节点编号为 [0, n - 1]，数组 edges[i] = [from, to, weight] 表示在 from 和 to 节点之间有一条带权无向边。</p>
<p>最小生成树 (MST) 是给定图中边的一个子集，它连接了所有节点且没有环，而且这些边的权值和最小。</p>
<p>请找出图中最小生成树的所有关键边和伪关键边。</p>
<blockquote>
<p>如果最小生成树中删去某条边，会导致最小生成树的权值和增加，那么我们就说它是一条关键边。<br>  伪关键边则是可能会出现在某些最小生成树中但不会出现在所有最小生成树中的边。</p>
</blockquote>
<p>可以分别以任意顺序返回关键边的下标和伪关键边的下标。</p>
<h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h2><p>（遇到图论就头疼，先回忆下最小生成树算法）<br>最小生成树的前提是连通图，如果去掉一条边，图不连通了，那么这是一条关键边。</p>
<p>最小生成树算法有两种：Kruskal 和 Prim，因为这题主要与边有关，所以选择 Kruskal 算法。</p>
<p>先在整张图上用 Kruskal 计算出最小生成树的权重 minWeight。</p>
<p>接着判断每条边是否是关键边：</p>
<ul>
<li>如果去掉这条边，最小生成树的权重大于 minWeight 或者图不连通了，那么这条边是关键边</li>
<li>如果不是关键边，先将这条边加入，再生成最小生成树，如果权重等于 minWeight，那么这条边是伪关建边</li>
</ul>
<h2 id="AC-代码-3"><a href="#AC-代码-3" class="headerlink" title="AC 代码"></a>AC 代码</h2><p>参考 <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1jcml0aWNhbC1hbmQtcHNldWRvLWNyaXRpY2FsLWVkZ2VzLWluLW1pbmltdW0tc3Bhbm5pbmctdHJlZS9zb2x1dGlvbi9jenVpLXhpYW8tc2hlbmctY2hlbmctc2h1LWtydXNrYWxzdWFuLWZhLWJpbmctY2hhLS8=">leetcode 题解<i class="fa fa-external-link-alt"></i></span> 实现的 Java 版</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    static <span class="keyword">class</span> <span class="symbol">Node</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> idx, <span class="keyword">from</span>, to, w;</span><br><span class="line">        Node(<span class="built_in">int</span> idx, <span class="built_in">int</span> <span class="keyword">from</span>, <span class="built_in">int</span> to, <span class="built_in">int</span> w) &#123;</span><br><span class="line">            <span class="keyword">this</span>.idx = idx;</span><br><span class="line">            <span class="keyword">this</span>.<span class="keyword">from</span> = <span class="keyword">from</span>;</span><br><span class="line">            <span class="keyword">this</span>.to = to;</span><br><span class="line">            <span class="keyword">this</span>.w = w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span>[] root; <span class="comment">// 并查集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> n, m; <span class="comment">// n 节点数 m 边数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; findCriticalAndPseudoCriticalEdges(<span class="built_in">int</span> n, <span class="built_in">int</span>[][] edges) &#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        <span class="keyword">this</span>.m = edges.length;</span><br><span class="line">        nodes = new ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; m;i++) &#123;</span><br><span class="line">            nodes.add(new Node(i, edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>], edges[i][<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        nodes.sort(Comparator.comparingInt(a -&gt; a.w));</span><br><span class="line">        root = new <span class="built_in">int</span>[n];</span><br><span class="line">        Arrays.fill(root, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">int</span> minWeight = kruskal(<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        res.add(new ArrayList&lt;&gt;());</span><br><span class="line">        res.add(new ArrayList&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; m;i++) &#123;</span><br><span class="line">            Arrays.fill(root, <span class="number">-1</span>);</span><br><span class="line">            Node node = nodes.<span class="keyword">get</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (kruskal(i, <span class="number">0</span>, <span class="number">0</span>) &gt; minWeight || find(node.<span class="keyword">from</span>) != find(node.to)) &#123;</span><br><span class="line">                res.<span class="keyword">get</span>(<span class="number">0</span>).add(node.idx);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Arrays.fill(root, <span class="number">-1</span>);</span><br><span class="line">                union(node.<span class="keyword">from</span>, node.to);</span><br><span class="line">                <span class="keyword">if</span> (kruskal(i, node.w, <span class="number">1</span>) == minWeight) &#123;</span><br><span class="line">                    res.<span class="keyword">get</span>(<span class="number">1</span>).add(node.idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> kruskal(<span class="built_in">int</span> skip, <span class="built_in">int</span> weight, <span class="built_in">int</span> count) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; m;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == skip) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Node node = nodes.<span class="keyword">get</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (union(node.<span class="keyword">from</span>, node.to)) &#123;</span><br><span class="line">                weight += node.w;</span><br><span class="line">                <span class="keyword">if</span> (++count == n - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> find(<span class="built_in">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root[a] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        root[a] = find(root[a]);</span><br><span class="line">        <span class="keyword">return</span> root[a];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span>ean union(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">        <span class="built_in">int</span> ra = find(a), rb = find(b);</span><br><span class="line">        <span class="keyword">if</span> (ra == rb) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root[ra] &lt; root[rb]) &#123;</span><br><span class="line">            root[rb] += root[ra];</span><br><span class="line">            root[ra] = rb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root[ra] += root[rb];</span><br><span class="line">            root[rb] = ra;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h3 id="最小生成树算法：Kruskal-和-Prim"><a href="#最小生成树算法：Kruskal-和-Prim" class="headerlink" title="最小生成树算法：Kruskal 和 Prim"></a>最小生成树算法：Kruskal 和 Prim</h3><p>Kruskal 算法的处理对象是边，流程如下：</p>
<ol>
<li>先将每条边按权重升序排序</li>
<li>按权重从小到大选择边，如果顶点 $u_i$，$v_i$在不同的树上，则把这条边加入最小生成树，并且将两棵树合并</li>
<li>重复 2，直到有 n - 1 条边为止</li>
</ol>
<p>实现 Kruskal 算法的难点在于如何判断两个点是否在一个树上，以及如何合并两棵树，它们的实现依赖并查集。</p>
<p>Prim 算法的处理对象是点，流程如下：</p>
<ol>
<li>从某一顶点 s 开始，令所有顶点集合为 $V$，初始集合 $u = {s}$, $v = V - u$</li>
<li>在两个集合 $u$，$v$ 能组成的边中，选择权重最小的边 $(u_i, v_i)$ 加入到最小生成树，并把 $v_i$ 加入 u</li>
<li>重复 2，直到有 n - 1 条边为止</li>
</ol>
<p>实现 Prim 算法的难点是维护集合 v 中每个顶点与集合 u 中顶点的最小权重。</p>
<h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>根据<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JUI5JUI2JUU2JTlGJUE1JUU5JTlCJTg2">维基百科<i class="fa fa-external-link-alt"></i></span>，并查集是一种树形的数据结构，哦用于处理一些不交集的合并及查询问题。</p>
<p>主要定义了两个操作：</p>
<ul>
<li>find：确定元素属于哪个集合</li>
<li>union：将两个子集合并成一个结合</li>
</ul>
<p>并查集的一大用法是路径压缩，当我们只关心一个节点的根节点或是否在一个集合内，可以使用并查集进行路径压缩。如果不使用并查集，寻找祖先时采用递归，一旦元素一多起来，或退化成一条链，都将会是 O(n) 的复杂度。</p>
<p>在合并时，将权重低的合并到权重高的树。有时也可用 root[i] 的值表示权重。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionSet</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>[] root;</span><br><span class="line">    <span class="keyword">int</span>[] weights;</span><br><span class="line">    UnionSet(<span class="keyword">int</span> <span class="built_in">size</span>) &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>];</span><br><span class="line">        weights = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">size</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">            root[i] = <span class="number">-1</span>;</span><br><span class="line">            weights[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (root[x] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            x = root[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == y)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (weights[x] &gt; weights[y]) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = x;</span><br><span class="line">            x = y;</span><br><span class="line">            y = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        weights[y] += weights[x];</span><br><span class="line">        root[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weights[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>Algorithm</tag>
        <tag>Competive Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 652 题解</title>
    <url>/posts/codeforces-round-652-solutions.html</url>
    <content><![CDATA[<h1 id="A-FashionabLee"><a href="#A-FashionabLee" class="headerlink" title="A. FashionabLee"></a>A. FashionabLee</h1><p>Lee 认为正多边形是美丽的当且仅当它至少各有一条边平行于X轴和Y轴。</p>
<p>输入 n 边行是否是美丽的，如果是输出 YES，否则输出 NO。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>（比赛的时候发现 4、8、12都是，硬猜出来的）<br>假设 n 边行是美丽的，它必定有且只有两条平行 X 轴和两条平行 Y 轴的边。</p>
<p>由于正 n 边行是对称的，一条平行 X 轴的边与一条平行 Y 轴的边之间的边数都是相等的，所以这个 n 边行的边必定是 4 的倍数。 </p>
<h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();   <span class="comment">// 封装输入类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">            pw.<span class="built_in">println</span>(n % <span class="number">4</span> == <span class="number">0</span> ? <span class="string">"YES"</span> : <span class="string">"NO"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="B-AccurateLee"><a href="#B-AccurateLee" class="headerlink" title="B. AccurateLee"></a>B. AccurateLee</h1><p>给定长度为 n 的二进制字符串，你可以进行以下操作：</p>
<ul>
<li>选中一组 “10”，然后随机删除一个字符</li>
</ul>
<p>操作不限次数，请返回能够得到的最短字符串。</p>
<p>如果有多个最短长度的结果，返回字典序小的。</p>
<h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><p>对于一组 “10”，可以删去 1 和 0，那到底什么时候删去 1，什么时候删去 0 呢？</p>
<p>由于最后结果要字典序小的，所以删到最后应该剩 0。</p>
<p>对于前缀 0 和后缀 1 是永远无法删除的。</p>
<p>另外还要考虑只有 0 或只有 1 的特殊情况。</p>
<h2 id="AC-代码-1"><a href="#AC-代码-1" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">            <span class="keyword">String</span> s = sc.next();</span><br><span class="line">            <span class="keyword">if</span> (s.indexOf(<span class="string">'0'</span>) == <span class="number">-1</span> || s.indexOf(<span class="string">'1'</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">                pw.<span class="built_in">println</span>(s);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == <span class="string">'1'</span>) &#123;</span><br><span class="line">                    left = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = s.length() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == <span class="string">'0'</span>) &#123;</span><br><span class="line">                    right = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right &lt;= left) &#123;</span><br><span class="line">                pw.<span class="built_in">println</span>(s.substring(<span class="number">0</span>, left) + s.substring(right + <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pw.<span class="built_in">println</span>(s.substring(<span class="number">0</span>, left) + <span class="string">"0"</span> + s.substring(right + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C-RationalLee"><a href="#C-RationalLee" class="headerlink" title="C. RationalLee"></a>C. RationalLee</h1><p>给定 n 个数的数组 a 和 k 个数的数组 w。</p>
<p>现要将数组 a 分为 k 份，每份的数量为 $w_k$。</p>
<p>每份的价值为最大值和最小值的和。</p>
<p>求最大的总价值。</p>
<p>数据要求：</p>
<p>$1 &lt;= n &lt;= 2 *10^5; 1 &lt;= k &lt;= n;<br>-10^9 &lt;= a_i &lt;= 10^9;1&lt;=w_i&lt;=n;w_1+w_2+…+w_k=n$</p>
<h2 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h2><p>如何能使最后的总价值最大？</p>
<ol>
<li>我们希望数组 a 里较大的数成为最大值，不会被埋没</li>
<li>我们希望数组 a 里的较小的数尽量不要出现，被隐藏越多越好</li>
</ol>
<img src="http://qcn3yr1zw.bkt.clouddn.com/static/images/652c.png">

<p>比如，数组 a = [1, 13, 7, 17]， w = [1, 3]。在分配时，17 单独放 1 个，其余放在一起。</p>
<p>这是一种贪心算法，流程如下：</p>
<ol>
<li>将 a 逆序排序，w 升序排序</li>
<li>优先处理 w[i] = 1 的情况，将未用过的最大值加入</li>
<li>再从最大的桶开始，放一个未用过的最大值，剩下的都放未用过的最小值，直到满为止</li>
</ol>
<h2 id="AC-代码-2"><a href="#AC-代码-2" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    static <span class="keyword">final</span> FS sc = new FS();</span><br><span class="line">    static <span class="keyword">final</span> PrintWriter pw = new PrintWriter(System.<span class="keyword">out</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> n = sc.nextInt(), k = sc.nextInt();</span><br><span class="line">            Integer[] a = new Integer[n], w = new Integer[k];</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">                a[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; k;i++) &#123;</span><br><span class="line">                w[i] = sc.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            Arrays.sort(a, (o1, o2) -&gt; o2 - o1);</span><br><span class="line">            Arrays.sort(w);</span><br><span class="line">            long res = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> i1 = k, l = <span class="number">0</span>, r = n <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; k;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (w[i] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    i1 = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res += a[l] * <span class="number">2</span>;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> j = k - <span class="number">1</span>;j &gt;= i1;j--) &#123;</span><br><span class="line">                res += a[l] + a[r];</span><br><span class="line">                r = r - w[j] + <span class="number">1</span>;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            pw.println(res);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="D-TediousLee"><a href="#D-TediousLee" class="headerlink" title="D. TediousLee"></a>D. TediousLee</h1><p>按下列规则构造一个 i 层的 RDB（Rooted Dead Bush），对 i - 1 的所有节点 u：</p>
<ol>
<li>如果节点 u 没有子节点，那么在 u 上加一个子节点</li>
<li>如果节点 u 有一个子节点，那么在 u 上加两个子节点</li>
<li>如果节点 u 有超过一个子节点，那么什么也不做。</li>
</ol>
<p>定义一个爪子为 1 个根节点带 3 个子节点的树状结构。现在给定一个 n 层的 RDB，初始时，所有的节点都是绿色的。在一次行动中，可以选择一个爪子，如果它的四个节点都是绿色，那么将它变为黄色。</p>
<p>问能得到黄色节点的最大个数。（结果对 1e9 + 7 取模）</p>
<h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h2><p>研究 RDB 的结构可以发现，i 层的结构是由 i - 1 层和 i - 2 层组成的，比如图中第 4 层，左右两子树是第 2 层，中间子树是第 3 层。所以可以用动态规划的思想来解题。</p>
<img src="http://qcn3yr1zw.bkt.clouddn.com/static/images/652d.png">

<p>再来看如何选择一个爪子？</p>
<p>1 层和 2 层都不存在，3 层刚好是一个。 4 层可以选择根节点的那个或者中间子树的，但是只能选一个，因为如果选了 3 层子树就不能再选根节点了。5 层等于 4 层的加上两个 3 层的。6 层则不同，因为 4 层和 5 层的最佳情况下，根节点都是黄色的。所以 6 层的最佳情况等于 5 层加上两个 4 层，再加上 4。</p>
<p>可以发现，当 i 为 3 的倍数时，RDB 的根节点是黄色的，而其他时候 RDB 的根节点是绿色的。由此，可以得出递归方程：$$dp[i] = (dp[i - 1] + 2 * dp[i - 2] + (i % 3 == 0 ? 4 : 0))$$</p>
<h2 id="AC-代码-3"><a href="#AC-代码-3" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    static <span class="keyword">final</span> FS sc = new FS();</span><br><span class="line">    static <span class="keyword">final</span> PrintWriter pw = new PrintWriter(System.<span class="keyword">out</span>);</span><br><span class="line">    static <span class="built_in">int</span> mod = (<span class="built_in">int</span>)(<span class="number">1e9</span> + <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        long[] dp = new long[<span class="number">2000</span>_001];</span><br><span class="line">        dp[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">4</span>; i &lt;= <span class="number">2e6</span>; i++) &#123;</span><br><span class="line">            dp[i] = (dp[i - <span class="number">1</span>] + <span class="number">2</span> * dp[i - <span class="number">2</span>] + (i % <span class="number">3</span> == <span class="number">0</span> ? <span class="number">4</span> : <span class="number">0</span>)) % mod;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            pw.println(dp[sc.nextInt()]);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="E-DeadLee"><a href="#E-DeadLee" class="headerlink" title="E. DeadLee"></a>E. DeadLee</h1><p>假设有 n 种食物以及 m 个人。每种食物有 $w_i$ 份，每个人有两种喜好 $x_i$ 和 $y_i$。</p>
<p>每个人轮流吃，且都需要选两种喜爱的食物吃，如果有人吃不到喜爱的食物，则 LEE 就要挂了。</p>
<p>请选择一种顺序，使得所有人都至少吃到一种喜爱的食物，如果不存在这种顺序，则打印 DEAD。</p>
<h2 id="思考-4"><a href="#思考-4" class="headerlink" title="思考"></a>思考</h2><p>从题意来看，如果所有食物加起来都不够吃的，那 LEE 肯定是挂了。</p>
<p>对单种食物，如果喜爱它的人超出了份数，会一定有人吃不到吗？如果份数超过了喜爱的人，能保证所有的人都能吃到吗？</p>
<p>答案是，不一定和能。</p>
<p>比如，有 4 种食物，份数分别是 [1, 2, 0, 1]，喜爱的情况如图上所示。</p>
<img src="http://qcn3yr1zw.bkt.clouddn.com/static/images/652e.png">

<p>第 4 种食物只有 3 号喜爱，所以优先给 3 号吃。这时可以从第 2 种食物里将 3 号删除。这时第 2 种食物也能满足 1 号和 2 号。最终 0 号吃到第 1 种食物。</p>
<p>这是一个贪心策略，流程如下：</p>
<ol>
<li>统计每种食物的喜爱人数</li>
<li>如果食物的份数大于等于喜爱的人数，则将食物分配出去，并将这些人从另一种喜爱的食物的喜爱人数里剔除</li>
<li>重复 2，不存在食物的份数大于等于喜爱的人数</li>
</ol>
<p>算法的时间复杂度是 $O(n + m)$。</p>
<h2 id="AC-代码-4"><a href="#AC-代码-4" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt(), m = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] w = sc.nextArray(n);</span><br><span class="line">        <span class="keyword">int</span>[][] wants = <span class="keyword">new</span> <span class="keyword">int</span>[m][<span class="number">2</span>];</span><br><span class="line">        List&lt;Set&lt;Integer&gt;&gt; adj = <span class="keyword">new</span> ArrayList&lt;&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            adj.add(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            wants[i] = sc.nextArray(<span class="number">2</span>);</span><br><span class="line">            wants[i][<span class="number">0</span>]--;</span><br><span class="line">            wants[i][<span class="number">1</span>]--;</span><br><span class="line">            adj.<span class="built_in">get</span>(wants[i][<span class="number">0</span>]).add(i);</span><br><span class="line">            adj.<span class="built_in">get</span>(wants[i][<span class="number">1</span>]).add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt; <span class="built_in">queue</span> = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (adj.<span class="built_in">get</span>(i).<span class="built_in">size</span>() &lt;= w[i]) &#123;</span><br><span class="line">                visited[i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">queue</span>.addLast(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="built_in">queue</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="built_in">queue</span>.removeFirst();</span><br><span class="line">            List&lt;Integer&gt; ppl = <span class="keyword">new</span> ArrayList&lt;&gt;(adj.<span class="built_in">get</span>(i));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p : ppl) &#123;</span><br><span class="line">                res.add(p);</span><br><span class="line">                <span class="keyword">int</span> wantX = wants[p][<span class="number">0</span>], wantY = wants[p][<span class="number">1</span>];</span><br><span class="line">                adj.<span class="built_in">get</span>(wantX).<span class="built_in">remove</span>(p);</span><br><span class="line">                adj.<span class="built_in">get</span>(wantY).<span class="built_in">remove</span>(p);</span><br><span class="line">                <span class="keyword">if</span> (!visited[wantX] &amp;&amp; adj.<span class="built_in">get</span>(wantX).<span class="built_in">size</span>() &lt;= w[wantX]) &#123;</span><br><span class="line">                    visited[wantX] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">queue</span>.addLast(wantX);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!visited[wantY] &amp;&amp; adj.<span class="built_in">get</span>(wantY).<span class="built_in">size</span>() &lt;= w[wantY]) &#123;</span><br><span class="line">                    visited[wantY] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="built_in">queue</span>.addLast(wantY);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="built_in">size</span>() != m) &#123;</span><br><span class="line">            pw.<span class="built_in">println</span>(<span class="string">"DEAD"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pw.<span class="built_in">println</span>(<span class="string">"ALIVE"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--) &#123;</span><br><span class="line">                pw.<span class="built_in">print</span>((res.<span class="built_in">get</span>(i) + <span class="number">1</span>) + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            pw.<span class="built_in">println</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="F-BareLee"><a href="#F-BareLee" class="headerlink" title="F. BareLee"></a>F. BareLee</h1><p>Bare 和 Lee 在玩一个游戏，共有 t 轮。<br>在每一轮，有两个起始数字 $s_i$ 与 $e_i$，在一次操作中，可以将另 $s_i *= 2$ 或 $s_i += 1$。<br>谁令 $s_i$ 超过 $e_i$，谁就输了。</p>
<p>Lee 首先行动，上一轮赢的人成为下一轮的后手，最后一轮赢的人赢得整场游戏。</p>
<p>问 Lee 能否始终赢或者始终输，无论对手如何选择。</p>
<h2 id="思考-5"><a href="#思考-5" class="headerlink" title="思考"></a>思考</h2><p>博弈的问题通常是先后手的问题：我的先手就是你的后手。</p>
<p>先来看在一局比赛中，你是否可以稳定赢或稳定输？</p>
<p>稳定输的情况：</p>
<ul>
<li>当 s &gt; e / 2 时，或 [s, e / 2] 下稳定赢(Why?)</li>
</ul>
<p>稳定赢的情况：</p>
<ul>
<li>如果 e 是奇数，则 s 为偶数时稳定赢</li>
<li>如果 e 是偶数<ul>
<li>s &gt; e / 2，则 s 为奇数时稳定赢</li>
<li>s &gt; e / 4，则稳定赢</li>
<li>否则等价与 [s, e / 4]（Why？）</li>
</ul>
</li>
</ul>
<p>再来看整场比赛：用 $W_i$ 表示包含 i 场比赛的局是否稳赢，L_i 相反。<br>那么有<br>$$W_i = (W_{i - 1}  \land !w_i) || (L_{i - 1} \land w_i)$$<br>$$L_i = (W_{i - 1} \land !l_i) || (L_{i - 1} \land l_i)$$</p>
<h2 id="AC-代码-5"><a href="#AC-代码-5" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    static <span class="keyword">final</span> FS sc = new FS();</span><br><span class="line">    static <span class="keyword">final</span> PrintWriter pw = new PrintWriter(System.<span class="keyword">out</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="built_in">bool</span>ean[] win = new <span class="built_in">bool</span>ean[t];</span><br><span class="line">        <span class="built_in">bool</span>ean[] lose = new <span class="built_in">bool</span>ean[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; t; i++)&#123;</span><br><span class="line">            long s = sc.nextLong(), e = sc.nextLong();</span><br><span class="line">            <span class="built_in">bool</span>ean w = forceWin(s, e);</span><br><span class="line">            <span class="built_in">bool</span>ean l = forceLose(s, e);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                win[<span class="number">0</span>] = w;</span><br><span class="line">                lose[<span class="number">0</span>] = l;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(win[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!w)  win[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(!l)  lose[i] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(lose[i - <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(w)   win[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(l)   lose[i] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.println((win[t - <span class="number">1</span>] ? <span class="number">1</span> : <span class="number">0</span>) + <span class="string">" "</span> + (lose[t - <span class="number">1</span>] ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static <span class="built_in">bool</span>ean forceWin(long s, long e)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s &gt; e / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s % <span class="number">2</span> != <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s &gt; e / <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> forceWin(s, e / <span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static <span class="built_in">bool</span>ean forceLose(long s, long e)&#123;</span><br><span class="line">        <span class="keyword">return</span> s &gt; e / <span class="number">2</span> || forceWin(s,e / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>Algorithm</tag>
        <tag>Competive Programming</tag>
        <tag>Div2</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 653 题解</title>
    <url>/posts/codeforces-round-653-solutions.html</url>
    <content><![CDATA[<h1 id="A-Required-Remainder"><a href="#A-Required-Remainder" class="headerlink" title="A. Required Remainder"></a>A. Required Remainder</h1><p>给定整数 x, y, n。返回最大的 k ($0 \le k \le n$) 使得 k mod x = y。<br>其中 $2 \le x \le 1e9$；$0 \le y &lt; x;y \leq n &lt; 1e9$</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>k mod x = y 意味着存在一个数 m，使得 m * x + y = k；</p>
<p>要想令 k 最大，m 的取值越大越好，在 k 的范围内，m 的最大取值为 n / x 或 n / x - 1，取决于 m * x + y 是否大于 n。</p>
<p>时间复杂度是 O(1)。</p>
<h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();  <span class="comment">// 封装输入类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = sc.nextInt(), y = sc.nextInt(), n = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span> res = (n / x) * x + y;</span><br><span class="line">            <span class="keyword">if</span> (res &gt; n) &#123;</span><br><span class="line">                res -= x;</span><br><span class="line">            &#125;</span><br><span class="line">            pw.<span class="built_in">println</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="B-Multiply-by-2-divide-by-6"><a href="#B-Multiply-by-2-divide-by-6" class="headerlink" title="B. Multiply by 2, divide by 6"></a>B. Multiply by 2, divide by 6</h1><p>给定整数 n，在一次行动中，可以乘 2，也可以除 6（可以整除的话）。</p>
<p>返回使 n 变到 1 需要的最少次数。（如果不可能则返回 -1）</p>
<h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><p>n 变到 1 的唯一路径是不断除 6。除一次 6 可以去掉一个 2 和一个 3。</p>
<p>如果 n 包含 2 和 3 以外的因子，返回 -1.</p>
<p>所以 n 可以表示为 $2^i * 3^j$，最短路径是先乘以 2 令 i 补齐到 j，再不断除以 6。</p>
<p>如果 i &gt; j，就不可能将 3 除尽了，返回 -1。</p>
<p>最终结果为 $Math.max(i, j) - Math.abs(i - j) = 2 * j - i$。</p>
<p>时间复杂度是 $O(\log{n})$。</p>
<h2 id="AC-代码-1"><a href="#AC-代码-1" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    static <span class="keyword">final</span> FS sc = new FS();  <span class="comment">// 封装输入类</span></span><br><span class="line">    static <span class="keyword">final</span> PrintWriter pw = new PrintWriter(System.<span class="keyword">out</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> n = sc.nextInt();</span><br><span class="line">            <span class="built_in">int</span> two = <span class="number">0</span>, three = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                n /= <span class="number">2</span>;</span><br><span class="line">                two++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                n /= <span class="number">3</span>;</span><br><span class="line">                three++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (n != <span class="number">1</span> || two &gt; three) &#123;</span><br><span class="line">                pw.println(<span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pw.println(three * <span class="number">2</span> - two);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="C-Move-Brackets"><a href="#C-Move-Brackets" class="headerlink" title="C. Move Brackets"></a>C. Move Brackets</h1><p>给定一个长度为偶数 n 的字符串 s，s 包含 n/2 的左括号 ‘(‘ 和右括号 ‘)’。</p>
<p>有效的 s 的定义为：</p>
<ul>
<li>“()” 是有效的</li>
<li>如果 s 是有效的，那么 “(“ + s + “)” 也是有效的</li>
<li>如果 s 和 t 是有效的，那么 s + t 也是有效的</li>
</ul>
<p>在一次行动中可以将任意一个括号移动最前面或最后面。</p>
<p>求将 s 变为有效的所需的最少行动次数。</p>
<h2 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h2><p>一个无效 s 的出现意味着右括号的数量超过了左括号的数量，这时我们总可以将右括号移到最后面，将 s 变为有效。</p>
<p>括号匹配的问题一般会用到栈，这题由于只关心是否有效，可用标志位代替栈。（0 表示空栈，&gt; 0 表示左括号的数量）。</p>
<p>时间复杂度是 O(n)。</p>
<h2 id="AC-代码-2"><a href="#AC-代码-2" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();  <span class="comment">// 封装输入类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">            StringBuilder s = <span class="keyword">new</span> StringBuilder(sc.next());</span><br><span class="line">            Stack&lt;Character&gt; <span class="built_in">stack</span> = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// int state = 0;</span></span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">'('</span>) &#123;</span><br><span class="line">                    <span class="built_in">stack</span>.push(c); <span class="comment">// state++;</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">stack</span>.isEmpty()) &#123; <span class="comment">// state == 0</span></span><br><span class="line">                    res++;</span><br><span class="line">                    s.append(c);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">stack</span>.pop(); <span class="comment">// state--;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pw.<span class="built_in">println</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="D-Zero-Remainder-Array"><a href="#D-Zero-Remainder-Array" class="headerlink" title="D. Zero Remainder Array"></a>D. Zero Remainder Array</h1><p>给定长度为 n 的数组 a 和初始数字 x。在一次行动中，可以二选一操作：</p>
<ol>
<li>选定从 1 到 n 的 i ，使 $a_i = a_i + x$，然后 x++;</li>
<li>直接 x++</li>
</ol>
<p>对每一个 i，第一个操作最多执行 1 次。</p>
<p>返回使数组 a 的每个数都被 k 整除所需的最少次数。</p>
<h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h2><p>使数组 a 的每个数都被 k 整除，就是对每个数加上它对 k 的余数。</p>
<p>比如 a = [1, 3, 2, 2, 5], k = 3：</p>
<ul>
<li>对 1，需要加 2；</li>
<li>对 3，不用加；</li>
<li>对第一个 2，需要加 1；</li>
<li>对第二个 2，此时不能加 1，因为加 1 已经用过了，可以看到 x 在每次操作后都会加 1，所以第二个 2 只能加 4；</li>
<li>对 5，由于加 1 和加 4 都用过了，所以只能加 7。</li>
</ul>
<p>最终 a 变为 [3, 3, 3, 6, 12]，操作次数是 8。</p>
<p>实现也比较简单，但是要注意不要溢出问题。</p>
<h2 id="AC-代码-3"><a href="#AC-代码-3" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();  <span class="comment">// 封装输入类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span> (t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = sc.nextInt(), k = sc.nextInt();</span><br><span class="line">            <span class="keyword">int</span>[] a = sc.nextArray(n);</span><br><span class="line">            Map&lt;Integer, Integer&gt; counts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> num : a) &#123;</span><br><span class="line">                <span class="keyword">int</span> m = num % k;</span><br><span class="line">                <span class="keyword">if</span> (m &gt; <span class="number">0</span>)</span><br><span class="line">                    counts.<span class="built_in">put</span>(m, counts.getOrDefault(m, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(Integer key : counts.keySet()) &#123;</span><br><span class="line">                res = Math.<span class="built_in">max</span>(res, (<span class="keyword">long</span>) counts.<span class="built_in">get</span>(key) * (<span class="keyword">long</span>)k - key);</span><br><span class="line">            &#125;</span><br><span class="line">            pw.<span class="built_in">println</span>(res == <span class="number">0</span> ? <span class="number">0</span> : res + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="E1-Reading-Books-easy-version"><a href="#E1-Reading-Books-easy-version" class="headerlink" title="E1. Reading Books (easy version)"></a>E1. Reading Books (easy version)</h1><p>Alice 和 Bod 一起阅读。</p>
<p>给定 n 本书，对于每本书，$t_i$ 表示阅读需要的时间，$a_i$ 表示 Alice 是否喜欢，$b_i$ 表示 Bob 是否喜欢。</p>
<p>从 n 本书中选若干本组成阅读书目，该书目需要满足：</p>
<ol>
<li>Alice 和 Bob 都至少喜欢 k 本书</li>
<li>总阅读时间最短</li>
</ol>
<p>返回最少阅读时间，不存在则返回 -1。</p>
<h2 id="思考-4"><a href="#思考-4" class="headerlink" title="思考"></a>思考</h2><p>首先对书进行分类，分为 a 喜欢的，b 喜欢的，ab 都喜欢的以及 ab 都不喜欢的。</p>
<p>题目的要求是书目至少包含 a 喜欢的 k 本书和 b 喜欢的 k 本书，所以不用关心 ab 都不喜欢的书。</p>
<p><strong>在选书时，应该如何选呢？</strong></p>
<p>为了使阅读时间最少，首先将三类书分别按阅读时间排序。在选书时，尝试选择 ab 都喜欢的最短的书，除非 a 喜欢的最短的书加上 b 喜欢的最短的书，两本书加起来的时间还少于 ab 都喜欢的。</p>
<p>如果不存在 ab 都喜欢的，那么贪心的选 a 和 b 喜欢的最短的书，直到选够 k 本书。</p>
<h2 id="AC-代码-4"><a href="#AC-代码-4" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();  <span class="comment">// 封装输入类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt(), k = sc.nextInt();</span><br><span class="line">        PriorityQueue&lt;Integer&gt; a = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        PriorityQueue&lt;Integer&gt; b = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        PriorityQueue&lt;Integer&gt; ab = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = sc.nextInt(), ai = sc.nextInt(), bi = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (ai == <span class="number">1</span> &amp;&amp; bi == <span class="number">1</span>) &#123;</span><br><span class="line">                ab.add(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ai == <span class="number">1</span>) &#123;</span><br><span class="line">                a.add(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bi == <span class="number">1</span>) &#123;</span><br><span class="line">                b.add(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> countA = <span class="number">0</span>, countB = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(countA &lt; k || countB &lt; k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ab.isEmpty() &amp;&amp; !a.isEmpty() &amp;&amp; !b.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ab.<span class="built_in">peek</span>() &lt;= a.<span class="built_in">peek</span>() + b.<span class="built_in">peek</span>()) &#123;</span><br><span class="line">                    res += ab.poll();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res += a.poll() + b.poll();</span><br><span class="line">                &#125;</span><br><span class="line">                countA++;</span><br><span class="line">                countB++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!ab.isEmpty()) &#123;</span><br><span class="line">                res += ab.poll();</span><br><span class="line">                countA++;</span><br><span class="line">                countB++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!a.isEmpty() &amp;&amp; countA &lt; k) &#123;</span><br><span class="line">                res += a.poll();</span><br><span class="line">                countA++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!b.isEmpty() &amp;&amp; countB &lt; k) &#123;</span><br><span class="line">                res += b.poll();</span><br><span class="line">                countB++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (countA &lt; k || countB &lt; k) &#123;</span><br><span class="line">            pw.<span class="built_in">println</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pw.<span class="built_in">println</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="E2-Reading-Books-hard-version"><a href="#E2-Reading-Books-hard-version" class="headerlink" title="E2. Reading Books (hard version)"></a>E2. Reading Books (hard version)</h1><p>Alice 和 Bod 再次一起阅读 n 本书，分配规则同 E1。</p>
<p>不同的是，需要从 n 本书中选 m 本书。</p>
<p>同样返回最少阅读时间，不存在则返回 -1。</p>
<h2 id="思考-5"><a href="#思考-5" class="headerlink" title="思考"></a>思考</h2><p>E2 比 E1 多了一个硬性要求，必须选中 m 本书。</p>
<p>首先，我么可以先按照 E1 的思路，选中任意本书满足至少包含 a 喜欢的 k 本书和 b 喜欢的 k 本书。</p>
<p>然后，在这个基础上，对选中的集合进行删减。</p>
<p>如果选中的书大于 m，那么需要做减法。因为在做减法时，仍需要满足  k 本书的条件，所以唯一的减法是去除 a 喜欢的和 b 喜欢的各一本，选择 ab 都喜欢的代替。如果不存在，则返回 -1.</p>
<p>如果选中的书小于 m，那么需要做加法。首先从未选中的书里选一本最短的书，如果不存在，则返回 -1，替换的方案有几种</p>
<ul>
<li>存在 ab 都喜欢的，且 a 喜欢的和 b 喜欢的都还有未使用的<ul>
<li>方案一：剔除 ab 都喜欢的，替换成 a 喜欢的 + b 喜欢的</li>
<li>方案二：直接加入新书</li>
<li>比较方案一和方案二，选择阅读时间最短的</li>
</ul>
</li>
<li>否则直接加入新书</li>
</ul>
<h1 id="F-Cyclic-Shifts-Sorting"><a href="#F-Cyclic-Shifts-Sorting" class="headerlink" title="F. Cyclic Shifts Sorting"></a>F. Cyclic Shifts Sorting</h1><p>给定长度为 n 的数组 a，使用下列操作进行排序：</p>
<ul>
<li>选中 i，用 $[a_{i+2}, a_{i}, a_{i+1}]$ 代替 $[a_{i}, a_{i + 1}, a_{i + 2}]$</li>
</ul>
<p>即向右旋转一位，最多操作 $n^2$ 次。</p>
<p>返回操作次数以及每次操作选择的下标</p>
<h2 id="思考-6"><a href="#思考-6" class="headerlink" title="思考"></a>思考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9ibG9nL2VudHJ5Lzc5NTE3">官方题解<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>Algorithm</tag>
        <tag>Competive Programming</tag>
        <tag>Div3</tag>
      </tags>
  </entry>
  <entry>
    <title>Codeforces Round 654 题解</title>
    <url>/posts/codeforces-round-654-solutions.html</url>
    <content><![CDATA[<h1 id="A-Magical-Sticks"><a href="#A-Magical-Sticks" class="headerlink" title="A. Magical Sticks"></a>A. Magical Sticks</h1><p>给定长度为 1 - n 的木棍，Rocher 可以将长度为 a 和长度为 b 的木棍接起来，形成长度为 a + b 的木棍。<br>返回 Rocher 能得到相同长度木棍的最大数量。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>当 n 为偶数时，最多可形成 $1 + n = 2 + (n - 1) = … = \frac{n}{2} + (\frac{n}{2} + 1)$ 共 $\frac{n}{2}$ 个。</p>
<p>当 n 为奇数时，目标长度为 n，$n = 1 + (n - 1) = … = \frac{n-1}{2} + (\frac{n-1}{2} + 1)$ 共 $\frac{n - 1}{2} + 1 = \frac{n + 1}{2}$</p>
<p>综上，答案为 $\frac{n + 1}{2}$。（n 为偶数时，n + 1 不会影响）<br>时间复杂度为 O(1)。</p>
<h1 id="B-Magical-Calendar"><a href="#B-Magical-Calendar" class="headerlink" title="B. Magical Calendar"></a>B. Magical Calendar</h1><p>（题意都难读懂的题）<br>有这样一个神奇的日历，它一周的长度 k （$1\le k \le r$）可以任意指定。<br>给定一定天数 n，你要在日历上连续安排 n 天。安排的形状有两点限制：</p>
<ul>
<li>任意两天都是相连的，即不能在日历上中断</li>
<li>形状相同的视为一种安排</li>
</ul>
<p>给定 n 和 r，返回不同安排的数量。</p>
<h2 id="思考-1"><a href="#思考-1" class="headerlink" title="思考"></a>思考</h2><p>试着画出几个例子后可以发现，当 n &lt; k 时，每一个 k 对应的种类都是 k 种。<br>比如，k = 3，n = 4，在图上可以有 3 中不同的安排。</p>
<img src="http://qcn3yr1zw.bkt.clouddn.com/static/images/654b.png">

<p>当 n &gt;= k 时，由于安排在日历上必须是相连的，所以 n 天必须排在一周内，不能跨周，这样就只有一种安排。</p>
<p>所以，当 n &gt; r 时，答案是$1 + 2 + … + r = \frac{(r + 1) * r}{2}$；</p>
<p>当 $n \le r$ 时，答案是$1 + 2 + … + (n - 1) + 1 = \frac{(n - 1) * n}{2} + 1$。</p>
<h2 id="AC-代码"><a href="#AC-代码" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> FS sc = <span class="keyword">new</span> FS();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> PrintWriter pw = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> n = sc.nextLong(), r = sc.nextLong();</span><br><span class="line">            <span class="keyword">if</span> (n &lt;= r) &#123;</span><br><span class="line">                pw.<span class="built_in">println</span>((n - <span class="number">1</span>) * n / <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pw.<span class="built_in">println</span>((r + <span class="number">1</span>) * r / <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.<span class="built_in">flush</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="C-A-Cookie-for-You"><a href="#C-A-Cookie-for-You" class="headerlink" title="C. A Cookie for You"></a>C. A Cookie for You</h1><p>有 A、B 两种饼干各 a、b 个。有两种客户，人数分别是 n 和 m，他们选择饼干的规则为：</p>
<ul>
<li>第一种类型：当 a &gt; b 时，选择 A，否则选 B</li>
<li>第二种类型: 当 a &gt; b 时，选择 B，否则选 A</li>
</ul>
<p>每个人按顺序选择，问是否有一种顺序可以满足所有人的选择。</p>
<h2 id="思考-2"><a href="#思考-2" class="headerlink" title="思考"></a>思考</h2><p>刚开始看题一脸懵，到底该先选 A 还是先选 B？</p>
<p>明显的一点是，当饼干的数量小于总人数时，肯定是无法满足的。</p>
<p>再分析两种类型的人的特点，第一类人只吃多的，而第二类人只吃少的。所以，如果满足上述条件的话，第一类人总能吃到他想选的。而第二类人有可能吃不到。</p>
<p>所以，其实最佳方案就是，先安排第二类人，再安排第一类人。如果两种饼干较少的一堆可以满足第二类人，则返回 “Yes”。</p>
<h1 id="D-Grid-00100"><a href="#D-Grid-00100" class="headerlink" title="D. Grid-00100"></a>D. Grid-00100</h1><p>给定整数 n 和 k，构造 n x n 的数组 A，A 只包含 0 和 1，且只能包含 k 个 1。<br>定义 $R_i$ 为第 i 行的和，$C_j$ 为第 j 列的和，定义f(A)<br>$$f(A) = (max(R) - min(R))^2 + (max(C) - min(C))^2 $$</p>
<p>问 f(A) 的最小值，以及 1 在 A 如何分布？</p>
<h2 id="思考-3"><a href="#思考-3" class="headerlink" title="思考"></a>思考</h2><p>f(A) 的取值与每行和每列的最大值和最小值有关，如何能尽量让差值变小呢？</p>
<p>假设 k &lt; n，应该怎么分配？按对角线分配！<br>假设 n = 3，k 的分布如下：</p>
<img src="http://qcn3yr1zw.bkt.clouddn.com/static/images/654d-1.png">

<p>当 k % n == 0 时，f(A) = 0，否则 f(A) = 2，分配方案是按对角线逐步分配，以 n = 4 为例，数字表示填充 1 的顺序。</p>
<img src="http://qcn3yr1zw.bkt.clouddn.com/static/images/654d-2.png">
<h2 id="AC-代码-1"><a href="#AC-代码-1" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    static <span class="keyword">final</span> FS sc = new FS();</span><br><span class="line">    static <span class="keyword">final</span> PrintWriter pw = new PrintWriter(System.<span class="keyword">out</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span> t = sc.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(t-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> n = sc.nextInt(), k = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (k % n == <span class="number">0</span>) &#123;</span><br><span class="line">                pw.println(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pw.println(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span>[][] res = new <span class="built_in">int</span>[n][n];</span><br><span class="line">            <span class="built_in">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                k--;</span><br><span class="line">                res[p][q] = <span class="number">1</span>;</span><br><span class="line">                p++;</span><br><span class="line">                q = (q + <span class="number">1</span>) % n;</span><br><span class="line">                <span class="keyword">if</span> (p == n) &#123;</span><br><span class="line">                    p = <span class="number">0</span>;</span><br><span class="line">                    q = (q + <span class="number">1</span>) % n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>;j &lt; n;j++) &#123;</span><br><span class="line">                    pw.print(res[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                pw.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="E-Asterism"><a href="#E-Asterism" class="headerlink" title="E. Asterism"></a>E. Asterism</h1><p>Yuzu 在玩一个游戏，初始时有 x 个糖果。有 n 个敌人站在她面前，每个敌人手里有 $a_i$ 块糖果。<br>Yuzu 可以决定他们的顺序（任意选一个排列），跟每个敌人比较：</p>
<ul>
<li>如果 Yuzu 的糖果数大于等于敌人，Yuzu 赢且多一块糖果，否则 Yuzu 就输了</li>
<li>得到的一块糖果可以继续用</li>
</ul>
<p>Yuzu 希望全赢，共有多少种排列满足条件？定义 f(x) 为有效的排列数。如果 f(x) 不能被质数 p 整除，则称 x 是好的数。找到所有的 x。</p>
<h2 id="思考-4"><a href="#思考-4" class="headerlink" title="思考"></a>思考</h2><p>令 $m = max(a_1, a_2, …, a_n)$。<br>当 x &lt; m - n + 1 时，没有一种排列满足条件，此时 f(x) = 0。<br>当 x &gt;= m 时，任何一种排列都可以满足条件，此时 f(x) = n!。</p>
<p>由于 f(x) 是单调递增的，所以可以用二分查找法，找出左右边界。</p>
<h2 id="AC-代码-2"><a href="#AC-代码-2" class="headerlink" title="AC 代码"></a>AC 代码</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    static <span class="keyword">final</span> FS sc = new FS();</span><br><span class="line">    static <span class="keyword">final</span> PrintWriter pw = new PrintWriter(System.<span class="keyword">out</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="built_in">int</span> n = sc.nextInt(), p = sc.nextInt();</span><br><span class="line">        <span class="built_in">int</span>[] a = sc.nextArray(n);</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        <span class="built_in">int</span> left = <span class="number">1</span>, right = (<span class="built_in">int</span>) <span class="number">1e9</span>;</span><br><span class="line">        <span class="built_in">int</span> first = (<span class="built_in">int</span>) <span class="number">1e9</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> x = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">bool</span>ean valid = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &gt; x + i) &#123;</span><br><span class="line">                    valid = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                right = x - <span class="number">1</span>;</span><br><span class="line">                first = x;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = x + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> last = first - <span class="number">1</span>;</span><br><span class="line">        left = first;</span><br><span class="line">        right = (<span class="built_in">int</span>) <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="built_in">int</span> x = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">bool</span>ean valid = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="built_in">int</span> c = Math.max(<span class="number">0</span>, a[i] - x);</span><br><span class="line">                <span class="built_in">int</span> options = i + <span class="number">1</span> - c;</span><br><span class="line">                <span class="keyword">if</span> (options % p == <span class="number">0</span>) &#123;</span><br><span class="line">                    valid = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">                left = x + <span class="number">1</span>;</span><br><span class="line">                last = x;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = x - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.println(last - first + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = first; i &lt;= last; i++) &#123;</span><br><span class="line">            pw.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.println();</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="F-Raging-Thunder"><a href="#F-Raging-Thunder" class="headerlink" title="F. Raging Thunder"></a>F. Raging Thunder</h1><p>给定长度为 n 的字符串，字符串内只包含 “&lt;”” 和 “&gt;”。假设在每个字符间都有一个洞，包括两端，那么就有 n + 1 个洞，编号从 0 到 n，编号为 0 的洞在最左侧。</p>
<p>当一个球落在第 i （$i \ge 1$）位时，球的移动规则：<br>如果第 i 位为 “&lt;”，那么</p>
<ul>
<li>如果 i = 1，球落在 0 号洞</li>
<li>如果 i - 1 的符号为 &lt;，球移动到 i - 1 位</li>
<li>如果 i - 1 的符号为 &gt;，球落在 i - 1 号洞口</li>
</ul>
<p>相反的，如果第 i 位为 “&gt;”，那么</p>
<ul>
<li>如果 i = n，球落在 n 号洞</li>
<li>如果 i + 1 的符号为 &gt;，球移动到 i + 1 位</li>
<li>如果 i + 1 的符号为 &lt;，球落在 i 号洞口</li>
</ul>
<p>给定一条查询 l, r ($1 \le l \le r \le n$)，首先将 [l,r] 位的符号取反（改动保持到下一次查询），然后在 [l, r] 各放一个球，找出掉落球最多的洞口（球不计入下一次查询）。</p>
<h2 id="思考-5"><a href="#思考-5" class="headerlink" title="思考"></a>思考</h2><p>一个球会落在形如 “&gt;&gt;&gt;…&gt;&gt;&lt;&lt;…&lt;&lt;&lt;” 的结构中，可以使用<span class="exturl" data-url="aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9ibG9nL2VudHJ5Lzc5NjI0">线段树<i class="fa fa-external-link-alt"></i></span>来解。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Codeforces</tag>
        <tag>Algorithm</tag>
        <tag>Competive Programming</tag>
        <tag>Div2</tag>
      </tags>
  </entry>
</search>
